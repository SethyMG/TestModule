Type	Filename	Filename with path	Base filename	Line	Column	Column(0 indexed)	Message level	Message number	Message number (4 digits)	Message text	Message help file	Verbose text	Rule	Group id
++ WARNING ++	Dir-01.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-01.01.c	Dir-01	2	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Dir-01.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-01.01.c	Dir-01	131	26	25	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	m3cmex.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\m3cmex.h	m3cmex	12	9	8	1	3406	3406	 Object/function 'obj_0806c', with external linkage, has been defined in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3406.html	An identifier with external linkage shall have exactly one external definition	M3CM Rule-8.6	7
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	25	8	7	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	26	16	15	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	27	16	15	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	43	8	7	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	49	16	15	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	55	16	15	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	61	16	15	1	3006	3006	 This function contains a mixture of in-line assembler statements and C statements.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3006.html	Assembly language shall be encapsulated and isolated	M3CM Dir-4.3	6
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	65	4	3	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	67	4	3	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	69	4	3	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	71	5	4	1	1003	1003	 [E] '#asm' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1003.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.02.c	Dir-04	76	8	7	1	1003	1003	 [E] '#endasm' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1003.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	61	16	15	1	3006	3006	 This function contains a mixture of in-line assembler statements and C statements.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3006.html	Assembly language shall be encapsulated and isolated	M3CM Dir-4.3	6
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	65	4	3	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	69	16	15	1	3006	3006	 This function contains a mixture of in-line assembler statements and C statements.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3006.html	Assembly language shall be encapsulated and isolated	M3CM Dir-4.3	6
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	73	4	3	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	77	16	15	1	3006	3006	 This function contains a mixture of in-line assembler statements and C statements.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3006.html	Assembly language shall be encapsulated and isolated	M3CM Dir-4.3	6
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	82	5	4	1	1003	1003	 [E] '#asm' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1003.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	87	8	7	1	1003	1003	 [E] '#endasm' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1003.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.03.c	Dir-04	98	4	3	1	1006	1006	 [E] This in-line assembler construct is a language extension. The code has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1006.html	All usage of assembly language should be documented, Language extensions should not be used	M3CM Dir-4.2, M3CM Rule-1.2	5
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	31	0	4294967295	1	5209	5209	 Use of basic type 'signed char'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	32	0	4294967295	1	5209	5209	 Use of basic type 'short'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	33	0	4294967295	1	5209	5209	 Use of basic type 'signed short'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	34	0	4294967295	1	5209	5209	 Use of basic type 'short int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	35	0	4294967295	1	5209	5209	 Use of basic type 'signed short int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	36	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	37	0	4294967295	1	5209	5209	 Use of basic type 'signed'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	38	0	4294967295	1	5209	5209	 Use of basic type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	39	0	4294967295	1	5209	5209	 Use of basic type 'long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	40	0	4294967295	1	5209	5209	 Use of basic type 'signed long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	41	0	4294967295	1	5209	5209	 Use of basic type 'long int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	42	0	4294967295	1	5209	5209	 Use of basic type 'signed long int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	43	0	4294967295	1	5209	5209	 Use of basic type 'long long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	44	0	4294967295	1	5209	5209	 Use of basic type 'long long int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	45	0	4294967295	1	5209	5209	 Use of basic type 'signed long long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	46	0	4294967295	1	5209	5209	 Use of basic type 'signed long long int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	48	0	4294967295	1	5209	5209	 Use of basic type 'unsigned char'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	49	0	4294967295	1	5209	5209	 Use of basic type 'unsigned short'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	50	0	4294967295	1	5209	5209	 Use of basic type 'unsigned short int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	51	0	4294967295	1	5209	5209	 Use of basic type 'unsigned'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	52	0	4294967295	1	5209	5209	 Use of basic type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	53	0	4294967295	1	5209	5209	 Use of basic type 'unsigned long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	54	0	4294967295	1	5209	5209	 Use of basic type 'unsigned long int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	55	0	4294967295	1	5209	5209	 Use of basic type 'unsigned long long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	56	0	4294967295	1	5209	5209	 Use of basic type 'unsigned long long int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	58	0	4294967295	1	5209	5209	 Use of basic type 'float'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	59	0	4294967295	1	5209	5209	 Use of basic type 'double'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	60	0	4294967295	1	5209	5209	 Use of basic type 'long double'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.06.c	Dir-04	68	0	4294967295	1	5209	5209	 Use of basic type 'float'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Dir-04.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Dir-04.09.c	Dir-04	20	75	74	1	3453	3453	 A function could probably be used instead of this function-like macro.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3453.html	A function should be used in preference to a function-like macro where they are interchangeable	M3CM Dir-4.9	4
++ WARNING ++	dir-0410-bad.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\dir-0410-bad.h	dir-0410-bad	15	59	58	1	883	0883	 Include file code is not protected against repeated inclusion	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0883.html	Precautions shall be taken in order to prevent the contents of a header file being included more then once	M3CM Dir-4.10	6
++ WARNING ++	Rule-01.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-01.03.c	Rule-01	2	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-01.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-01.03.c	Rule-01	341	16	15	1	3447	3447	 'obj0103' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	53	11	10	1	2880	2880	 This code is unreachable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2880.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	70	12	11	1	2882	2882	 This 'switch' statement will bypass the initialization of local variables.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2882.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	72	20	19	0	1594	1594	 'm' declared here.			0.5	0
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	72	15	14	1	3234	3234	 Declarations precede the first label in this 'switch' construct.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3234.html	All switch statements shall be well-formed	M3CM Rule-16.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	73	7	6	1	2008	2008	 Code statements precede the first label in this 'switch' construct.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2008.html	All switch statements shall be well-formed	M3CM Rule-16.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	73	7	6	1	2880	2880	 This code is unreachable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2880.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	93	7	6	1	2880	2880	 This code is unreachable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2880.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	96	12	11	1	2744	2744	 This 'while' or 'for' loop controlling expression is a constant expression and its value is 'false'. The loop will not be entered.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2744.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	98	7	6	1	2880	2880	 This code is unreachable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2880.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	101	9	8	1	2742	2742	 This 'if' controlling expression is a constant expression and its value is 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2742.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	103	7	6	1	2880	2880	 This code is unreachable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2880.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	113	9	8	1	570	0570	 This switch case label of 'essential type' 'signed char', is not consistent with a controlling expression of essential type 'XX'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	113	9	8	1	1460	1460	 'Switch' label value, 3, not contained in enum type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1460.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.01.c	Rule-02	121	16	15	1	3219	3219	 Static function 'rule_0201b()' is not used within this translation unit.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3219.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	64	35	34	1	2980	2980	 The value of this function parameter is never used before being modified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2980.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	69	7	6	0	1585	1585	 Next set here.			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	66	18	17	1	2981	2981	 This initialization is redundant. The value of this object is never used before being modified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2981.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	70	7	6	0	1585	1585	 Next set here.			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	71	7	6	1	2983	2983	 This assignment is redundant. The value of this object is never subsequently used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2983.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	67	13	12	0	1594	1594	 'y' declared here.			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	75	21	20	1	2985	2985	 This operation is redundant. The value of the result is always that of the left-hand operand.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2985.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	m3cmex.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\m3cmex.h	m3cmex	93	17	16	0	1594	1594	 'u16a' declared here.			0.5	0
++ WARNING ++	m3cmex.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\m3cmex.h	m3cmex	94	17	16	0	1594	1594	 'u16b' declared here.			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	73	14	13	0	1575	1575	 Variable 'u16a' previously seen here. (Specimen value: '32768').			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	73	14	13	0	1575	1575	 Variable 'u16b' previously seen here. (Specimen value: '0').			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	82	21	20	1	2986	2986	 This operation is redundant. The value of the result is always that of the right-hand operand.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2986.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	73	14	13	0	1575	1575	 Variable 'u16a' previously seen here. (Specimen value: '1').			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	78	10	9	0	1575	1575	 Variable 'u16b' previously seen here. (Specimen value: '0').			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	80	14	13	0	1575	1575	 Variable 'u16a' previously seen here. (Specimen value: '1').			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	87	18	17	1	2991	2991	 The value of this 'if' controlling expression is always 'true'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2991.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	m3cmex.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\m3cmex.h	m3cmex	109	16	15	0	1594	1594	 's16a' declared here.			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	85	14	13	0	1575	1575	 Variable 's16a' previously seen here. (Specimen value: '16384').			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	87	18	17	1	2995	2995	 The result of this logical operation is always 'true'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2995.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	91	18	17	1	2992	2992	 The value of this 'if' controlling expression is always 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2992.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	91	18	17	1	2996	2996	 The result of this logical operation is always 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2996.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	96	16	15	1	3110	3110	 The left-hand operand of this ',' has no side effects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3110.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	96	16	15	1	3417	3417	 The comma operator has been used outside a 'for' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3417.html	The comma operator should not be used	M3CM Rule-12.3	5
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	97	13	12	1	3417	3417	 The comma operator has been used outside a 'for' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3417.html	The comma operator should not be used	M3CM Rule-12.3	5
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	97	13	12	1	3426	3426	 Right hand side of comma expression has no side effect and its value is not used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3426.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	99	5	4	1	3112	3112	 This statement has no side-effect - it can be removed.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3112.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	101	5	4	1	3425	3425	 One branch of this conditional operation is a redundant expression.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3425.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	101	26	25	1	3226	3226	 The result of an assignment is being used in an arithmetic operation or another assigning operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3226.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	103	5	4	1	3427	3427	 Right hand side of logical operator has no side effect and its value is not used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3427.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	105	14	13	1	2984	2984	 This operation is redundant. The value of the result is always '10'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2984.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	69	7	6	0	1575	1575	 Variable 'p' previously seen here. (Specimen value: '5').			0.5	0
++ WARNING ++	Rule-02.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.02.c	Rule-02	70	7	6	0	1575	1575	 Variable 'x' previously seen here. (Specimen value: '5').			0.5	0
++ WARNING ++	Rule-02.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.06.c	Rule-02	24	1	0	1	3202	3202	 The label 'L1:' is not used in this function and could be removed.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3202.html	A function should not contain unused label declarations	M3CM Rule-2.6	5
++ WARNING ++	Rule-02.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.06.c	Rule-02	26	1	0	1	3202	3202	 The label 'L2:' is not used in this function and could be removed.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3202.html	A function should not contain unused label declarations	M3CM Rule-2.6	5
++ WARNING ++	Rule-02.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-02.07.c	Rule-02	27	43	42	1	3206	3206	 The parameter 'b' is not used in this function.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3206.html	There should be no unused parameters in functions	M3CM Rule-2.7	5
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	3	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	27	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	27	78	77	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	29	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	29	78	77	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	31	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	31	74	73	1	1011	1011	 [C99] Use of '//' comment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1011.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	31	78	77	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	33	74	73	1	1011	1011	 [C99] Use of '//' comment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1011.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-03.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.01.c	Rule-03	33	78	77	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.02.c	Rule-03	1	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.02.c	Rule-03	6	40	39	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-03.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-03.02.c	Rule-03	23	0	4294967295	1	5134	5134	 C++ style comment uses line splicing.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5134.html	Line-splicing shall not be used in // comments.	M3CM Rule-3.2	7
++ WARNING ++	Rule-04.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.01.c	Rule-04	21	19	18	1	284	0284	 [I] Multiple character constants have implementation defined values.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0284.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-04.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.01.c	Rule-04	21	22	21	1	3628	3628	 Octal escape sequences used in a character constant or string literal.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3628.html	Octal constants shall not be used	M3CM Rule-7.1	7
++ WARNING ++	Rule-04.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.01.c	Rule-04	22	19	18	1	284	0284	 [I] Multiple character constants have implementation defined values.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0284.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-04.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.01.c	Rule-04	22	22	21	1	3628	3628	 Octal escape sequences used in a character constant or string literal.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3628.html	Octal constants shall not be used	M3CM Rule-7.1	7
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	23	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	24	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	25	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	26	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	26	32	31	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	27	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	28	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	29	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	30	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	31	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	32	29	28	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	33	56	55	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-04.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-04.02.c	Rule-04	33	59	58	1	3601	3601	 Trigraphs (??x) are an ISO feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3601.html	Trigraphs should not be used	M3CM Rule-4.2	5
++ WARNING ++	Rule-05.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.01.c	Rule-05	24	46	45	1	777	0777	 [U] External identifier does not differ from other identifier(s) (e.g. 'engine_exhaust_gas_temperature_raw') within the specified number of significant characters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0777.html	There shall be no occurrence of undefined or critical unspecified behaviour, External identifiers shall be distinct	M3CM Rule-1.3, M3CM Rule-5.1	7
++ WARNING ++	Rule-05.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.01.c	Rule-05	24	46	45	1	779	0779	 [U] Identifier does not differ from other identifier(s) (e.g. 'engine_exhaust_gas_temperature_raw') within the specified number of significant characters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0779.html	There shall be no occurrence of undefined or critical unspecified behaviour, Identifiers declared in the same scope and name space shall be distinct	M3CM Rule-1.3, M3CM Rule-5.2	7
++ WARNING ++	Rule-05.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.02.c	Rule-05	27	51	50	1	779	0779	 [U] Identifier does not differ from other identifier(s) (e.g. 'a234567890123456789012345678901234') within the specified number of significant characters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0779.html	There shall be no occurrence of undefined or critical unspecified behaviour, Identifiers declared in the same scope and name space shall be distinct	M3CM Rule-1.3, M3CM Rule-5.2	7
++ WARNING ++	Rule-05.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.02.c	Rule-05	32	46	45	1	779	0779	 [U] Identifier does not differ from other identifier(s) (e.g. 'a234567890123456789012345678901234') within the specified number of significant characters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0779.html	There shall be no occurrence of undefined or critical unspecified behaviour, Identifiers declared in the same scope and name space shall be distinct	M3CM Rule-1.3, M3CM Rule-5.2	7
++ WARNING ++	Rule-05.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.03.c	Rule-05	36	12	11	1	3334	3334	 This declaration of 'enx1' hides a more global declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3334.html	An identifier declared in an inner scope shall not hide an identifier declared in an outer scope	M3CM Rule-5.3	7
++ WARNING ++	Rule-05.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.03.c	Rule-05	38	11	10	1	2547	2547	 This declaration of tag 'ST0503' hides a more global declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2547.html	An identifier declared in an inner scope shall not hide an identifier declared in an outer scope	M3CM Rule-5.3	7
++ WARNING ++	Rule-05.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.04.c	Rule-05	19	103	102	1	779	0779	 [U] Identifier does not differ from other identifier(s) (e.g. 'engine_exhaust_gas_temperature_raw') within the specified number of significant characters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0779.html	There shall be no occurrence of undefined or critical unspecified behaviour, Identifiers declared in the same scope and name space shall be distinct	M3CM Rule-1.3, M3CM Rule-5.2	7
++ WARNING ++	Rule-05.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.06.c	Rule-05	30	19	18	1	3448	3448	 Declaration of typedef 't0506d' is not in a header file although it is used in a definition or declaration with external linkage.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3448.html	A typedef name shall be a unique identifier	M3CM Rule-5.6	7
++ WARNING ++	Rule-05.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-05.06.c	Rule-05	32	15	14	1	3447	3447	 'mheavy' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	27	8	7	1	634	0634	 [I] Bit-fields in this struct/union have not been declared explicitly as unsigned or signed.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0634.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood, Bit-fields shall only be declared with an appropriate type	M3CM Dir-1.1, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	27	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	28	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	29	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	31	8	7	1	634	0634	 [I] Bit-fields in this struct/union have not been declared explicitly as unsigned or signed.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0634.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood, Bit-fields shall only be declared with an appropriate type	M3CM Dir-1.1, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	31	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	32	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	33	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	35	8	7	1	634	0634	 [I] Bit-fields in this struct/union have not been declared explicitly as unsigned or signed.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0634.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood, Bit-fields shall only be declared with an appropriate type	M3CM Dir-1.1, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	39	8	7	1	634	0634	 [I] Bit-fields in this struct/union have not been declared explicitly as unsigned or signed.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0634.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood, Bit-fields shall only be declared with an appropriate type	M3CM Dir-1.1, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	39	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	40	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	41	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.01.c	Rule-06	43	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	23	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	23	39	38	1	3660	3660	 Named bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3660.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	24	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	26	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	26	39	38	1	3665	3665	 Unnamed bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3665.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	27	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	29	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	29	39	38	1	3660	3660	 Named bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3660.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	30	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	32	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	32	39	38	1	3665	3665	 Unnamed bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3665.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	33	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	35	39	38	1	3660	3660	 Named bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3660.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	38	39	38	1	3665	3665	 Unnamed bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3665.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	41	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	41	39	38	1	3660	3660	 Named bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3660.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	42	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	44	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	44	39	38	1	3665	3665	 Unnamed bit-field consisting of a single bit declared with a signed type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3665.html	Single-bit named bit fields shall not be of a signed type	M3CM Rule-6.2	7
++ WARNING ++	Rule-06.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-06.02.c	Rule-06	45	8	7	1	635	0635	 [E] Bit-fields in this struct/union have been declared with types other than int, signed int, unsigned int or _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0635.html	Language extensions should not be used, Bit-fields shall only be declared with an appropriate type	M3CM Rule-1.2, M3CM Rule-6.1	7
++ WARNING ++	Rule-07.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.01.c	Rule-07	25	9	8	1	336	0336	 Macro defined as an octal constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0336.html	Octal constants shall not be used	M3CM Rule-7.1	7
++ WARNING ++	Rule-07.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.01.c	Rule-07	33	23	22	1	3628	3628	 Octal escape sequences used in a character constant or string literal.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3628.html	Octal constants shall not be used	M3CM Rule-7.1	7
++ WARNING ++	Rule-07.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.01.c	Rule-07	36	9	8	1	339	0339	 Octal constant used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0339.html	Octal constants shall not be used	M3CM Rule-7.1	7
++ WARNING ++	Rule-07.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.01.c	Rule-07	38	14	13	1	3628	3628	 Octal escape sequences used in a character constant or string literal.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3628.html	Octal constants shall not be used	M3CM Rule-7.1	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	46	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	47	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	50	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	51	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	59	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	60	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	65	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	66	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	69	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	70	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	78	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.02.c	Rule-07	79	4	3	1	1281	1281	 Integer literal constant is of an unsigned type but does not include a "U" suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1281.html	A "u" or "U" suffix shall be applied to all integer constants that are represented in an unsigned type	M3CM Rule-7.2	7
++ WARNING ++	Rule-07.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.03.c	Rule-07	22	15	14	1	1280	1280	 A lowercase letter L (l) has been used in an integer or floating suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1280.html	The lowercase character "l" shall not be used in a literal suffix	M3CM Rule-7.3	7
++ WARNING ++	Rule-07.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.03.c	Rule-07	23	17	16	1	1280	1280	 A lowercase letter L (l) has been used in an integer or floating suffix.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1280.html	The lowercase character "l" shall not be used in a literal suffix	M3CM Rule-7.3	7
++ WARNING ++	Rule-07.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.04.c	Rule-07	34	38	37	1	753	0753	 String literal assigned to pointer which is not a 'pointer to const'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0753.html	A string literal shall not be assigned to an object unless the object's type is "pointer to const-qualified char"	M3CM Rule-7.4	7
++ WARNING ++	Rule-07.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.04.c	Rule-07	35	40	39	1	753	0753	 String literal assigned to pointer which is not a 'pointer to const'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0753.html	A string literal shall not be assigned to an object unless the object's type is "pointer to const-qualified char"	M3CM Rule-7.4	7
++ WARNING ++	Rule-07.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.04.c	Rule-07	39	15	14	1	752	0752	 String literal passed as argument to function whose parameter is not a 'pointer to const'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0752.html	A string literal shall not be assigned to an object unless the object's type is "pointer to const-qualified char"	M3CM Rule-7.4	7
++ WARNING ++	Rule-07.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-07.04.c	Rule-07	51	15	14	1	752	0752	 String literal passed as argument to function whose parameter is not a 'pointer to const'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0752.html	A string literal shall not be assigned to an object unless the object's type is "pointer to const-qualified char"	M3CM Rule-7.4	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	24	21	20	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	26	32	31	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	27	45	44	1	2051	2051	 The 'int' type specifier has been omitted from an object declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2051.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	28	14	13	1	2051	2051	 The 'int' type specifier has been omitted from an object declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2051.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	29	16	15	1	2051	2051	 The 'int' type specifier has been omitted from an object declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2051.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	30	17	16	1	2051	2051	 The 'int' type specifier has been omitted from an object declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2051.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	31	21	20	1	2051	2051	 The 'int' type specifier has been omitted from an object declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2051.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	44	1	0	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.01.c	Rule-08	49	1	0	1	2051	2051	 The 'int' type specifier has been omitted from an object declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2051.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	33	17	16	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	36	1	0	1	3007	3007	 "void" has been omitted when defining a function with no parameters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3007.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	40	17	16	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	50	1	0	1	3007	3007	 "void" has been omitted when defining a function with no parameters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3007.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	54	18	17	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	57	16	15	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	59	16	15	1	3002	3002	 Defining 'rule_0802_04()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	67	16	15	1	3002	3002	 Defining 'rule_0802_05()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	76	18	17	1	3002	3002	 Defining 'rule_0802_06()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	84	16	15	1	3002	3002	 Defining 'rule_0802_07()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	91	34	33	1	1336	1336	 Parameter identifiers missing in declaration of a function type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1336.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	92	13	12	1	3002	3002	 Defining 'rule_0802_08()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	96	34	33	1	1335	1335	 Parameter identifiers missing in function prototype declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1335.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	97	13	12	1	3002	3002	 Defining 'rule_0802_09()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	103	13	12	1	3002	3002	 Defining 'rule_0802_10()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	108	13	12	1	3002	3002	 Defining 'rule_0802_11()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	113	16	15	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	114	16	15	1	3002	3002	 Defining 'rule_0802_12()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	120	16	15	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	121	16	15	1	3002	3002	 Defining 'rule_0802_13()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	128	13	12	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	130	1	0	1	3007	3007	 "void" has been omitted when defining a function with no parameters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3007.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	133	13	12	1	3001	3001	 Function has been declared with an empty parameter list.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3001.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	Rule-08.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.02.c	Rule-08	134	13	12	1	3002	3002	 Defining 'rule_0802_15()' with an identifier list and separate parameter declarations is an obsolescent feature.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3002.html	Function types shall be in prototype form with named parameters	M3CM Rule-8.2	7
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	18	0	4294967295	1	5209	5209	 Use of basic type 'unsigned'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	19	0	4294967295	1	5209	5209	 Use of basic type 'unsigned'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	24	0	4294967295	1	5209	5209	 Use of basic type 'double'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	26	0	4294967295	1	5209	5209	 Use of basic type 'long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	27	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	28	0	4294967295	1	5209	5209	 Use of basic type 'long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	29	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	29	0	4294967295	1	5209	5209	 Use of basic type 'unsigned long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	30	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	34	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	38	0	4294967295	1	5209	5209	 Use of basic type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	44	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	45	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	46	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	48	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdlib.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdlib.h	stdlib	49	0	4294967295	1	5209	5209	 Use of basic type 'long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-08.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.03.c	Rule-08	44	35	34	1	1330	1330	 The parameter identifiers in this function declaration differ from those in a previous declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1330.html	All declarations of an object or function shall use the same names and type qualifiers	M3CM Rule-8.3	7
++ WARNING ++	Rule-08.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.03.c	Rule-08	49	16	15	1	3675	3675	 Function parameter declared with type qualification which differs from previous declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3675.html	All declarations of an object or function shall use the same names and type qualifiers	M3CM Rule-8.3	7
++ WARNING ++	Rule-08.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.03.c	Rule-08	54	16	15	1	624	0624	 Function 'rule_0803c' is declared using typedefs which are different to those in a previous declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0624.html	All declarations of an object or function shall use the same names and type qualifiers	M3CM Rule-8.3	7
++ WARNING ++	Rule-08.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.04.c	Rule-08	22	9	8	1	3408	3408	 'obj0804' has external linkage and is being defined without any previous declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3408.html	A compatible declaration shall be visible when an object or function with external linkage is defined	M3CM Rule-8.4	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	30	16	15	1	3447	3447	 'obj_0805a' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	31	16	15	1	3447	3447	 'obj_0805b' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	32	16	15	1	3447	3447	 'obj_0805c' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	34	16	15	1	3447	3447	 'rule_0805' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	34	16	15	1	3451	3451	 The global identifier 'rule_0805' has been declared in more than one file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3451.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	38	19	18	1	3447	3447	 'obj_0805d' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	38	28	27	1	3222	3222	 Object with external linkage declared at block scope.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3222.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	39	16	15	1	3221	3221	 Function with external linkage declared at block scope.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3221.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.05.c	Rule-08	39	16	15	1	3447	3447	 'test0805a' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.06.c	Rule-08	28	9	8	1	630	0630	 [U] More than one definition of 'obj_0806a' (with external linkage).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0630.html	There shall be no occurrence of undefined or critical unspecified behaviour, An identifier with external linkage shall have exactly one external definition	M3CM Rule-1.3, M3CM Rule-8.6	7
++ WARNING ++	Rule-08.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.07.c	Rule-08	22	16	15	1	3447	3447	 'rule_0807a' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.07.c	Rule-08	23	16	15	1	3447	3447	 'x0807' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	Rule-08.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.08.c	Rule-08	24	25	24	1	3224	3224	 This identifier has previously been declared with internal linkage but is not declared here with the static storage class specifier.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3224.html	The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage	M3CM Rule-8.8	7
++ WARNING ++	Rule-08.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.08.c	Rule-08	33	16	15	1	625	0625	 [U] 'obj_0808d' has been declared with both internal and external linkage - the behaviour is undefined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0625.html	There shall be no occurrence of undefined or critical unspecified behaviour	M3CM Rule-1.3	7
++ WARNING ++	Rule-08.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.08.c	Rule-08	36	16	15	1	625	0625	 [U] 'obj_0808e' has been declared with both internal and external linkage - the behaviour is undefined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0625.html	There shall be no occurrence of undefined or critical unspecified behaviour	M3CM Rule-1.3	7
++ WARNING ++	Rule-08.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.08.c	Rule-08	39	16	15	1	625	0625	 [U] 'obj_0808f' has been declared with both internal and external linkage - the behaviour is undefined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0625.html	There shall be no occurrence of undefined or critical unspecified behaviour	M3CM Rule-1.3	7
++ WARNING ++	Rule-08.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.08.c	Rule-08	46	1	0	1	3224	3224	 This identifier has previously been declared with internal linkage but is not declared here with the static storage class specifier.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3224.html	The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage	M3CM Rule-8.8	7
++ WARNING ++	Rule-08.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.08.c	Rule-08	48	20	19	1	622	0622	 [C] The identifier 'a0808' has been declared both with and without linkage in the same scope.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0622.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-08.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.09.c	Rule-08	25	16	15	1	3218	3218	 File scope static, 's0809a', is only accessed in one function.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3218.html	An object should be defined at block scope if its identifier only appears in a single function	M3CM Rule-8.9	5
++ WARNING ++	Rule-08.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.09.c	Rule-08	26	16	15	1	3218	3218	 File scope static, 's0809b', is only accessed in one function.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3218.html	An object should be defined at block scope if its identifier only appears in a single function	M3CM Rule-8.9	5
++ WARNING ++	Rule-08.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.09.c	Rule-08	27	16	15	1	3408	3408	 'obj_0809c' has external linkage and is being defined without any previous declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3408.html	A compatible declaration shall be visible when an object or function with external linkage is defined	M3CM Rule-8.4	7
++ WARNING ++	Rule-08.10.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.10.c	Rule-08	30	1	0	1	3243	3243	 inline function 'rule_0810b' is also an 'external definition'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3243.html	An inline function shall be declared with the static storage class	M3CM Rule-8.10	7
++ WARNING ++	Rule-08.10.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.10.c	Rule-08	34	16	15	1	3240	3240	 inline function 'rule_0810c' is being defined with external linkage.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3240.html	An inline function shall be declared with the static storage class	M3CM Rule-8.10	7
++ WARNING ++	Rule-08.11.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.11.c	Rule-08	25	24	23	1	3684	3684	 Array declared with unknown size.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3684.html	When an array with external linkage is declared, its size should be explicitly specified	M3CM Rule-8.11	5
++ WARNING ++	Rule-08.12.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.12.c	Rule-08	20	21	20	1	724	0724	 The value of this implicitly-specified enumeration constant is not unique.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0724.html	Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique	M3CM Rule-8.12	7
++ WARNING ++	Rule-08.12.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.12.c	Rule-08	21	27	26	1	724	0724	 The value of this implicitly-specified enumeration constant is not unique.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0724.html	Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique	M3CM Rule-8.12	7
++ WARNING ++	Rule-08.13.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.13.c	Rule-08	53	12	11	1	3673	3673	 The object addressed by the pointer parameter 'pbb' is not modified and so the pointer could be of type 'pointer to const'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3673.html	A pointer should point to a const-qualified type whenever possible	M3CM Rule-8.13	5
++ WARNING ++	Rule-08.13.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.13.c	Rule-08	54	12	11	1	3673	3673	 The object addressed by the pointer parameter 'pbc' is not modified and so the pointer could be of type 'pointer to const'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3673.html	A pointer should point to a const-qualified type whenever possible	M3CM Rule-8.13	5
++ WARNING ++	Rule-08.13.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.13.c	Rule-08	56	12	11	1	3673	3673	 The object addressed by the pointer parameter 'pbe' is not modified and so the pointer could be of type 'pointer to const'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3673.html	A pointer should point to a const-qualified type whenever possible	M3CM Rule-8.13	5
++ WARNING ++	Rule-08.14.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-08.14.c	Rule-08	20	0	4294967295	1	5137	5137	 Use of 'restrict' type qualifier.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5137.html	The restrict type qualifier shall not be used	M3CM Rule-8.14	7
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	50	9	8	1	2961	2961	 Definite: Using value of uninitialized automatic object 'ax'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2961.html	The value of an object with automatic storage duration shall not be read before it has been set	M3CM Rule-9.1	8
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	43	12	11	0	1594	1594	 'ax' declared here.			0.5	0
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	58	14	13	1	2962	2962	 Apparent: Using value of uninitialized automatic object 'bx'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2962.html	The value of an object with automatic storage duration shall not be read before it has been set	M3CM Rule-9.1	8
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	54	11	10	0	1586	1586	 Previously set here.			0.5	0
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	44	12	11	0	1594	1594	 'bx' declared here.			0.5	0
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	60	22	21	1	2971	2971	 Definite: Passing address of uninitialized object 'dx' to a function parameter declared as a pointer to const.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2971.html	The value of an object with automatic storage duration shall not be read before it has been set	M3CM Rule-9.1	8
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	46	12	11	0	1594	1594	 'dx' declared here.			0.5	0
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	64	23	22	1	2972	2972	 Apparent: Passing address of uninitialized object 'ex' to a function parameter declared as a pointer to const.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2972.html	The value of an object with automatic storage duration shall not be read before it has been set	M3CM Rule-9.1	8
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	55	11	10	0	1586	1586	 Previously set here.			0.5	0
++ WARNING ++	Rule-09.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.01.c	Rule-09	47	12	11	0	1594	1594	 'ex' declared here.			0.5	0
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	37	17	16	1	782	0782	 This identifier, 's1', will still be in scope when the same identifier is declared later in a different namespace.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0782.html	A typedef name shall be a unique identifier	M3CM Rule-5.6	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	105	11	10	0	1577	1577	 Next seen here.			0.5	0
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	39	31	30	1	693	0693	 Struct initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0693.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	40	39	38	1	693	0693	 Struct initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0693.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	41	31	30	1	693	0693	 Struct initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0693.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	44	35	34	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	45	46	45	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	46	35	34	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	48	26	25	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	58	32	31	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	59	43	42	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	60	32	31	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	62	33	32	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	63	33	32	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	65	34	33	1	694	0694	 Array initializer is missing the optional {.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0694.html	The initializer for an aggregate or union shall be enclosed in braces	M3CM Rule-9.2	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	105	11	10	1	780	0780	 Another identifier 's1' is already in scope in a different namespace.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0780.html	A typedef name shall be a unique identifier	M3CM Rule-5.6	7
++ WARNING ++	Rule-09.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.02.c	Rule-09	37	17	16	0	1582	1582	 Previously seen here.			0.5	0
++ WARNING ++	Rule-09.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.03.c	Rule-09	25	42	41	1	686	0686	 Array has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0686.html	Arrays shall not be partially initialized	M3CM Rule-9.3	7
++ WARNING ++	Rule-09.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-09.03.c	Rule-09	29	39	38	1	686	0686	 Array has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0686.html	Arrays shall not be partially initialized	M3CM Rule-9.3	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	192	8	7	1	4500	4500	 An expression of 'essentially Boolean' type (_Bool) is being used as an array subscript.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4500.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	194	10	9	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	195	10	9	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	196	10	9	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this arithmetic operator (*).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	197	10	9	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this arithmetic operator (/).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	198	10	9	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this arithmetic operator (%).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	200	11	10	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	201	11	10	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	202	11	10	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this arithmetic operator (*).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	203	11	10	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this arithmetic operator (/).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	204	11	10	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this arithmetic operator (%).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	206	6	5	1	4502	4502	 An expression of 'essentially Boolean' type (_Bool) is being used as the  operand of this bitwise operator (~).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4502.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	207	10	9	1	4502	4502	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4502.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	208	10	9	1	4502	4502	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4502.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	209	10	9	1	4502	4502	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4502.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	211	10	9	1	4502	4502	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4502.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	212	10	9	1	4502	4502	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4502.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	213	10	9	1	4502	4502	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4502.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	215	10	9	1	4503	4503	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4503.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	216	10	9	1	4503	4503	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4503.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	217	10	9	1	4503	4503	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4503.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	218	10	9	1	4503	4503	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4503.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	219	10	9	1	4503	4503	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4503.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	220	10	9	1	4503	4503	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4503.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	222	10	9	1	4504	4504	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4504.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	223	10	9	1	4504	4504	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4504.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	225	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this relational operator (<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	226	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this relational operator (<=).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	227	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this relational operator (>=).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	228	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this relational operator (>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	230	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this relational operator (<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	231	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this relational operator (<=).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	232	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this relational operator (>=).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	233	10	9	1	4505	4505	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this relational operator (>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4505.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	240	5	4	1	4507	4507	 An expression of 'essentially Boolean' type (_Bool) is being used as the operand of this increment/decrement operator (++).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4507.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	241	5	4	1	4507	4507	 An expression of 'essentially Boolean' type (_Bool) is being used as the operand of this increment/decrement operator (--).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4507.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	242	8	7	1	4507	4507	 An expression of 'essentially Boolean' type (_Bool) is being used as the operand of this increment/decrement operator (++).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4507.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-Boolean.c	Rule-10	243	8	7	1	4507	4507	 An expression of 'essentially Boolean' type (_Bool) is being used as the operand of this increment/decrement operator (--).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4507.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	190	8	7	1	4510	4510	 An expression of 'essentially character' type (char) is being used as an array subscript.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4510.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	194	10	9	1	4511	4511	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this arithmetic operator (*).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4511.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	195	10	9	1	4511	4511	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this arithmetic operator (/).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4511.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	196	10	9	1	4511	4511	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this arithmetic operator (%).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4511.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	200	11	10	1	4511	4511	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this arithmetic operator (*).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4511.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	201	11	10	1	4511	4511	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this arithmetic operator (/).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4511.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	202	11	10	1	4511	4511	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this arithmetic operator (%).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4511.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	204	6	5	1	4512	4512	 An expression of 'essentially character' type (char) is being used as the  operand of this bitwise operator (~).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4512.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	205	10	9	1	4512	4512	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4512.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	206	10	9	1	4512	4512	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4512.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	207	10	9	1	4512	4512	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4512.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	209	10	9	1	4512	4512	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4512.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	210	10	9	1	4512	4512	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4512.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	211	10	9	1	4512	4512	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4512.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	213	10	9	1	4513	4513	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4513.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	214	10	9	1	4513	4513	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4513.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	215	10	9	1	4513	4513	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4513.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	216	10	9	1	4513	4513	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4513.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	217	10	9	1	4513	4513	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4513.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	218	10	9	1	4513	4513	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4513.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	220	10	9	1	4514	4514	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4514.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	221	10	9	1	4514	4514	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4514.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	243	6	5	1	4518	4518	 An expression of 'essentially character' type (char) is being used as the  operand of this logical operator (!).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4518.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	244	10	9	1	4518	4518	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4518.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	245	10	9	1	4518	4518	 An expression of 'essentially character' type (char) is being used as the left-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4518.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	246	10	9	1	4518	4518	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4518.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	247	10	9	1	4518	4518	 An expression of 'essentially character' type (char) is being used as the right-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4518.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-character.c	Rule-10	249	10	9	1	4519	4519	 An expression of 'essentially character' type (char) is being used as the first operand of this conditional operator (?).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4519.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	192	10	9	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	193	10	9	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	194	10	9	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this arithmetic operator (*).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	195	10	9	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this arithmetic operator (/).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	196	10	9	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this arithmetic operator (%).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	198	11	10	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	199	11	10	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	200	11	10	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this arithmetic operator (*).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	201	11	10	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this arithmetic operator (/).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	202	11	10	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this arithmetic operator (%).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	204	6	5	1	4522	4522	 An expression of 'essentially enum' type (TN1) is being used as the  operand of this bitwise operator (~).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4522.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	205	10	9	1	4522	4522	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4522.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	206	10	9	1	4522	4522	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4522.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	207	10	9	1	4522	4522	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4522.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	209	10	9	1	4522	4522	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4522.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	210	10	9	1	4522	4522	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4522.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	211	10	9	1	4522	4522	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4522.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	213	10	9	1	4523	4523	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4523.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	214	10	9	1	4523	4523	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4523.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	215	10	9	1	4523	4523	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4523.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	216	10	9	1	4523	4523	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4523.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	217	10	9	1	4523	4523	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4523.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	218	10	9	1	4523	4523	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4523.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	220	10	9	1	4524	4524	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4524.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	221	10	9	1	4524	4524	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4524.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	238	5	4	1	4527	4527	 An expression of 'essentially enum' type is being used as the operand of this increment/decrement operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4527.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	239	5	4	1	4527	4527	 An expression of 'essentially enum' type is being used as the operand of this increment/decrement operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4527.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	240	8	7	1	4527	4527	 An expression of 'essentially enum' type is being used as the operand of this increment/decrement operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4527.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	241	8	7	1	4527	4527	 An expression of 'essentially enum' type is being used as the operand of this increment/decrement operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4527.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	243	6	5	1	4528	4528	 An expression of 'essentially enum' type (TN1) is being used as the  operand of this logical operator (!).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4528.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	244	10	9	1	4528	4528	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4528.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	245	10	9	1	4528	4528	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4528.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	246	10	9	1	4528	4528	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4528.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	247	10	9	1	4528	4528	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4528.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-enum.c	Rule-10	249	10	9	1	4529	4529	 An expression of 'essentially enum' type (TN1) is being used as the first operand of this conditional operator (?).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4529.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	190	8	7	1	453	0453	 [C] An array subscript must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0453.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	190	8	7	1	2753	2753	 As a result of error message '453', dataflow analysis of the remainder of this function is not possible.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2753.html	Dataflow recovery	0.4	0
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	196	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	202	11	10	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	204	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	205	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	206	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	208	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	209	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	210	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	212	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	213	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	214	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	215	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	216	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	217	10	9	1	495	0495	 [C] Left operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0495.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	219	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	220	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	242	10	9	1	4568	4568	 An expression of 'essentially floating' type (float) is being used as the left-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4568.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	243	10	9	1	4568	4568	 An expression of 'essentially floating' type (float) is being used as the left-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4568.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	244	10	9	1	4568	4568	 An expression of 'essentially floating' type (float) is being used as the right-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4568.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	245	10	9	1	4568	4568	 An expression of 'essentially floating' type (float) is being used as the right-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4568.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-floating.c	Rule-10	247	10	9	1	4569	4569	 An expression of 'essentially floating' type (float) is being used as the first operand of this conditional operator (?).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4569.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	204	6	5	1	4532	4532	 An expression of 'essentially signed' type (signed int) is being used as the  operand of this bitwise operator (~).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	205	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	206	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	207	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	209	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed int) is being used as the right-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	210	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed int) is being used as the right-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	211	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed int) is being used as the right-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	213	10	9	1	4533	4533	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4533.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	214	10	9	1	4533	4533	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4533.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	215	10	9	1	4533	4533	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4533.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	217	10	9	1	4533	4533	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4533.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	218	10	9	1	4533	4533	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4533.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	219	10	9	1	4533	4533	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4533.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	221	10	9	1	4534	4534	 An expression of 'essentially signed' type (signed int) is being used as the right-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4534.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	222	10	9	1	4534	4534	 An expression of 'essentially signed' type (signed int) is being used as the right-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4534.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	244	6	5	1	4538	4538	 An expression of 'essentially signed' type (signed int) is being used as the  operand of this logical operator (!).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4538.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	245	10	9	1	4538	4538	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4538.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	246	10	9	1	4538	4538	 An expression of 'essentially signed' type (signed int) is being used as the left-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4538.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	247	10	9	1	4538	4538	 An expression of 'essentially signed' type (signed int) is being used as the right-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4538.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	248	10	9	1	4538	4538	 An expression of 'essentially signed' type (signed int) is being used as the right-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4538.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	250	10	9	1	4539	4539	 An expression of 'essentially signed' type (signed int) is being used as the first operand of this conditional operator (?).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4539.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	269	6	5	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the  operand of this bitwise operator (~).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	270	7	6	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	271	7	6	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	272	7	6	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	274	10	9	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	275	10	9	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	276	10	9	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	278	7	6	1	4543	4543	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4543.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	279	7	6	1	4543	4543	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4543.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	280	7	6	1	4543	4543	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4543.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	282	7	6	1	4543	4543	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4543.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	283	7	6	1	4543	4543	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4543.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	284	7	6	1	4543	4543	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4543.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	286	10	9	1	4544	4544	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this shift operator (<<).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4544.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	287	10	9	1	4544	4544	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4544.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	309	6	5	1	4548	4548	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the  operand of this logical operator (!).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4548.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	310	7	6	1	4548	4548	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4548.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	311	7	6	1	4548	4548	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4548.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	312	10	9	1	4548	4548	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4548.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	313	10	9	1	4548	4548	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4548.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-signed.c	Rule-10	315	7	6	1	4549	4549	 A non-negative constant expression of 'essentially signed' type (signed char) is being used as the first operand of this conditional operator (?).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4549.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	189	6	5	1	3101	3101	 Unary '-' applied to an operand of type unsigned int or unsigned long gives an unsigned result.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3101.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	190	6	5	1	3102	3102	 Unary '-' applied to an operand whose underlying type is unsigned.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3102.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	191	6	5	1	3102	3102	 Unary '-' applied to an operand whose underlying type is unsigned.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3102.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	243	10	9	1	4558	4558	 An expression of 'essentially unsigned' type (unsigned int) is being used as the left-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4558.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	244	10	9	1	4558	4558	 An expression of 'essentially unsigned' type (unsigned int) is being used as the left-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4558.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	245	10	9	1	4558	4558	 An expression of 'essentially unsigned' type (unsigned int) is being used as the right-hand operand of this logical operator (&&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4558.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	246	10	9	1	4558	4558	 An expression of 'essentially unsigned' type (unsigned int) is being used as the right-hand operand of this logical operator (||).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4558.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.01-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.01-unsigned.c	Rule-10	248	10	9	1	4559	4559	 An expression of 'essentially unsigned' type (unsigned int) is being used as the first operand of this conditional operator (?).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4559.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	44	9	8	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	46	9	8	1	1810	1810	 An operand of 'essentially character' type is being added to another operand of 'essentially character' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1810.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	48	9	8	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	62	9	8	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	63	9	8	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	64	9	8	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	68	8	7	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	70	8	7	1	1810	1810	 An operand of 'essentially character' type is being added to another operand of 'essentially character' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1810.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	72	8	7	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this arithmetic operator (+).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	86	8	7	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	87	8	7	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	88	8	7	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	94	9	8	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the right-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	98	9	8	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the right-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	112	9	8	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	113	9	8	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	114	9	8	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	118	8	7	1	4501	4501	 An expression of 'essentially Boolean' type (_Bool) is being used as the left-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4501.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	122	8	7	1	4521	4521	 An expression of 'essentially enum' type (TN1) is being used as the left-hand operand of this arithmetic operator (-).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4521.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	124	8	7	1	1811	1811	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially signed' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1811.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	125	8	7	1	1811	1811	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially signed' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1811.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	126	8	7	1	1811	1811	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially signed' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1811.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	127	8	7	1	1811	1811	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially signed' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1811.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	128	8	7	1	1811	1811	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially signed' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1811.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	130	8	7	1	1812	1812	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially unsigned' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1812.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	131	8	7	1	1812	1812	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially unsigned' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1812.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	132	8	7	1	1812	1812	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially unsigned' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1812.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	133	8	7	1	1812	1812	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially unsigned' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1812.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	134	8	7	1	1812	1812	 An operand of 'essentially character' type is being subtracted from an operand of 'essentially unsigned' type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1812.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	136	8	7	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	137	8	7	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.02.c	Rule-10	138	8	7	1	1813	1813	 An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1813.html	Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations	M3CM Rule-10.2	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	258	9	8	1	4401	4401	 An expression of 'essentially Boolean' type (_Bool) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4401.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	259	9	8	1	4401	4401	 An expression of 'essentially Boolean' type (_Bool) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4401.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	260	12	11	1	4401	4401	 An expression of 'essentially Boolean' type (_Bool) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4401.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	267	9	8	1	4402	4402	 An expression of 'essentially Boolean' type (_Bool) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4402.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	268	9	8	1	4402	4402	 An expression of 'essentially Boolean' type (_Bool) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4402.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	269	12	11	1	4402	4402	 An expression of 'essentially Boolean' type (_Bool) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4402.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	275	10	9	1	4403	4403	 An expression of 'essentially Boolean' type (_Bool) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4403.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	276	10	9	1	4403	4403	 An expression of 'essentially Boolean' type (_Bool) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4403.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	277	12	11	1	4403	4403	 An expression of 'essentially Boolean' type (_Bool) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4403.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	284	10	9	1	4404	4404	 An expression of 'essentially Boolean' type (_Bool) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4404.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	285	10	9	1	4404	4404	 An expression of 'essentially Boolean' type (_Bool) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4404.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	286	12	11	1	4404	4404	 An expression of 'essentially Boolean' type (_Bool) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4404.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	293	10	9	1	4405	4405	 An expression of 'essentially Boolean' type (_Bool) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4405.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	294	11	10	1	4405	4405	 An expression of 'essentially Boolean' type (_Bool) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4405.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-Boolean.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-Boolean.c	Rule-10	295	12	11	1	4405	4405	 An expression of 'essentially Boolean' type (_Bool) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4405.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	254	19	18	1	4410	4410	 An expression of 'essentially character' type (char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4410.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	255	9	8	1	4410	4410	 An expression of 'essentially character' type (char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4410.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	256	9	8	1	4410	4410	 An expression of 'essentially character' type (char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4410.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	257	11	10	1	4410	4410	 An expression of 'essentially character' type (char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4410.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	281	9	8	1	4412	4412	 An expression of 'essentially character' type (char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4412.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	282	9	8	1	4412	4412	 An expression of 'essentially character' type (char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4412.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	283	11	10	1	4412	4412	 An expression of 'essentially character' type (char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4412.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	293	24	23	1	4413	4413	 An expression of 'essentially character' type (char) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4413.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	294	10	9	1	4413	4413	 An expression of 'essentially character' type (char) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4413.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	295	10	9	1	4413	4413	 An expression of 'essentially character' type (char) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4413.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	296	11	10	1	4413	4413	 An expression of 'essentially character' type (char) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4413.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	305	25	24	1	4414	4414	 An expression of 'essentially character' type (char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4414.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	306	10	9	1	4414	4414	 An expression of 'essentially character' type (char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4414.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	307	10	9	1	4414	4414	 An expression of 'essentially character' type (char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4414.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	308	11	10	1	4414	4414	 An expression of 'essentially character' type (char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4414.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	317	26	25	1	4415	4415	 An expression of 'essentially character' type (char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4415.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	318	10	9	1	4415	4415	 An expression of 'essentially character' type (char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4415.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	319	11	10	1	4415	4415	 An expression of 'essentially character' type (char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4415.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-character.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-character.c	Rule-10	320	11	10	1	4415	4415	 An expression of 'essentially character' type (char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4415.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	256	19	18	1	4420	4420	 An expression of 'essentially enum' type (TN1) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4420.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	257	9	8	1	4420	4420	 An expression of 'essentially enum' type (TN1) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4420.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	258	9	8	1	4420	4420	 An expression of 'essentially enum' type (TN1) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4420.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	259	11	10	1	4420	4420	 An expression of 'essentially enum' type (TN1) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4420.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	266	18	17	1	4421	4421	 An expression of 'essentially enum' type (TN1) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4421.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	267	9	8	1	4421	4421	 An expression of 'essentially enum' type (TN1) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4421.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	268	9	8	1	4421	4421	 An expression of 'essentially enum' type (TN1) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4421.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	269	11	10	1	4421	4421	 An expression of 'essentially enum' type (TN1) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4421.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	288	19	18	1	4422	4422	 An expression of 'essentially enum' type (TN1) is being converted to a different enum type, 'TN2' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4422.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	289	9	8	1	4422	4422	 An expression of 'essentially enum' type (TN1) is being converted to a different enum type, 'TN2' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4422.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	290	9	8	1	4422	4422	 An expression of 'essentially enum' type (TN1) is being converted to a different enum type, 'TN2' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4422.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	291	11	10	1	4422	4422	 An expression of 'essentially enum' type (TN1) is being converted to a different enum type, 'TN2' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4422.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	299	18	17	1	4423	4423	 An expression of 'essentially enum' type (TN1) is being converted to signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4423.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	300	9	8	1	4423	4423	 An expression of 'essentially enum' type (TN1) is being converted to signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4423.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	301	9	8	1	4423	4423	 An expression of 'essentially enum' type (TN1) is being converted to signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4423.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	302	11	10	1	4423	4423	 An expression of 'essentially enum' type (TN1) is being converted to signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4423.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	309	10	9	1	4423	4423	 An expression of 'essentially enum' type (TN1) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4423.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	310	10	9	1	4423	4423	 An expression of 'essentially enum' type (TN1) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4423.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	311	11	10	1	4423	4423	 An expression of 'essentially enum' type (TN1) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4423.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	318	9	8	1	4424	4424	 An expression of 'essentially enum' type (TN1) is being converted to unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4424.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	319	9	8	1	4424	4424	 An expression of 'essentially enum' type (TN1) is being converted to unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4424.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	320	11	10	1	4424	4424	 An expression of 'essentially enum' type (TN1) is being converted to unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4424.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	327	10	9	1	4424	4424	 An expression of 'essentially enum' type (TN1) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4424.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	328	10	9	1	4424	4424	 An expression of 'essentially enum' type (TN1) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4424.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	329	11	10	1	4424	4424	 An expression of 'essentially enum' type (TN1) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4424.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	336	25	24	1	4425	4425	 An expression of 'essentially enum' type (TN1) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4425.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	337	10	9	1	4425	4425	 An expression of 'essentially enum' type (TN1) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4425.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	338	11	10	1	4425	4425	 An expression of 'essentially enum' type (TN1) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4425.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-enum.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-enum.c	Rule-10	339	11	10	1	4425	4425	 An expression of 'essentially enum' type (TN1) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4425.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	252	22	21	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	253	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	254	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	255	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	259	22	21	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	260	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	261	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	262	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	266	22	21	1	4450	4450	 An expression of 'essentially floating' type (float) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	267	13	12	1	4450	4450	 An expression of 'essentially floating' type (float) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	268	13	12	1	4450	4450	 An expression of 'essentially floating' type (float) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	269	15	14	1	4450	4450	 An expression of 'essentially floating' type (float) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	273	22	21	1	4450	4450	 An expression of 'essentially floating' type (double) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	274	13	12	1	4450	4450	 An expression of 'essentially floating' type (double) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	275	13	12	1	4450	4450	 An expression of 'essentially floating' type (double) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	276	15	14	1	4450	4450	 An expression of 'essentially floating' type (double) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4450.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	284	22	21	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	285	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	286	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	287	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	291	22	21	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	292	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	293	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	294	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	298	22	21	1	4451	4451	 An expression of 'essentially floating' type (float) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	299	13	12	1	4451	4451	 An expression of 'essentially floating' type (float) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	300	13	12	1	4451	4451	 An expression of 'essentially floating' type (float) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	301	15	14	1	4451	4451	 An expression of 'essentially floating' type (float) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	305	22	21	1	4451	4451	 An expression of 'essentially floating' type (double) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	306	13	12	1	4451	4451	 An expression of 'essentially floating' type (double) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	307	13	12	1	4451	4451	 An expression of 'essentially floating' type (double) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	308	15	14	1	4451	4451	 An expression of 'essentially floating' type (double) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4451.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	316	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	317	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	318	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	322	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	323	13	12	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	324	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	328	13	12	1	4452	4452	 An expression of 'essentially floating' type (float) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4452.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	329	13	12	1	4452	4452	 An expression of 'essentially floating' type (float) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4452.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	330	15	14	1	4452	4452	 An expression of 'essentially floating' type (float) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4452.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	334	13	12	1	4452	4452	 An expression of 'essentially floating' type (double) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4452.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	335	13	12	1	4452	4452	 An expression of 'essentially floating' type (double) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4452.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	336	15	14	1	4452	4452	 An expression of 'essentially floating' type (double) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4452.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	344	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	345	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	346	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	350	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	351	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	352	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	356	14	13	1	4453	4453	 An expression of 'essentially floating' type (float) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4453.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	357	14	13	1	4453	4453	 An expression of 'essentially floating' type (float) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4453.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	358	15	14	1	4453	4453	 An expression of 'essentially floating' type (float) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4453.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	362	14	13	1	4453	4453	 An expression of 'essentially floating' type (double) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4453.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	363	14	13	1	4453	4453	 An expression of 'essentially floating' type (double) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4453.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	364	15	14	1	4453	4453	 An expression of 'essentially floating' type (double) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4453.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	372	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	373	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	374	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	378	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	379	14	13	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	380	15	14	1	1266	1266	 A floating constant is being converted to integral type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1266.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	384	14	13	1	4454	4454	 An expression of 'essentially floating' type (float) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4454.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	385	14	13	1	4454	4454	 An expression of 'essentially floating' type (float) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4454.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	386	15	14	1	4454	4454	 An expression of 'essentially floating' type (float) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4454.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	390	14	13	1	4454	4454	 An expression of 'essentially floating' type (double) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4454.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	391	14	13	1	4454	4454	 An expression of 'essentially floating' type (double) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4454.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-floating.c	Rule-10	392	15	14	1	4454	4454	 An expression of 'essentially floating' type (double) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4454.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	248	22	21	1	1294	1294	 An integer constant of 'essentially signed' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1294.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	249	13	12	1	1294	1294	 An integer constant of 'essentially signed' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1294.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	250	13	12	1	1294	1294	 An integer constant of 'essentially signed' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1294.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	251	15	14	1	1294	1294	 An integer constant of 'essentially signed' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1294.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	255	22	21	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	256	13	12	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	257	13	12	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	258	15	14	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	262	22	21	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	263	13	12	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	264	13	12	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	265	15	14	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	269	22	21	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	270	13	12	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	271	13	12	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	272	15	14	1	4430	4430	 An expression of 'essentially signed' type (signed char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4430.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	280	22	21	1	1292	1292	 An integer constant of 'essentially signed' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1292.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	281	13	12	1	1292	1292	 An integer constant of 'essentially signed' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1292.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	282	13	12	1	1292	1292	 An integer constant of 'essentially signed' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1292.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	283	15	14	1	1292	1292	 An integer constant of 'essentially signed' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1292.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	287	22	21	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	288	13	12	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	289	13	12	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	290	15	14	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	294	22	21	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	295	13	12	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	296	13	12	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	297	15	14	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	301	22	21	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	302	13	12	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	303	13	12	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	304	15	14	1	4431	4431	 An expression of 'essentially signed' type (signed char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4431.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	312	13	12	1	1296	1296	 An integer constant of 'essentially signed' type is being converted to enum type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1296.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	313	13	12	1	1296	1296	 An integer constant of 'essentially signed' type is being converted to enum type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1296.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	314	15	14	1	1296	1296	 An integer constant of 'essentially signed' type is being converted to enum type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1296.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	318	13	12	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	319	13	12	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	320	15	14	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	324	13	12	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	325	13	12	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	326	15	14	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	330	13	12	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	331	13	12	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	332	15	14	1	4432	4432	 An expression of 'essentially signed' type (signed char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4432.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	346	14	13	1	4436	4436	 A constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4436.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	347	14	13	1	4436	4436	 A constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4436.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	348	15	14	1	4436	4436	 A constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4436.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	352	14	13	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	352	14	13	1	4436	4436	 A constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4436.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	353	14	13	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	353	14	13	1	4436	4436	 A constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4436.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	354	15	14	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	354	15	14	1	4436	4436	 A constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4436.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	358	14	13	1	4434	4434	 A non-constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4434.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	359	14	13	1	4434	4434	 A non-constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4434.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	360	15	14	1	4434	4434	 A non-constant expression of 'essentially signed' type (signed char) is being converted to unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4434.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	368	14	13	1	1298	1298	 An integer constant of 'essentially signed' type is being converted to floating type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1298.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	369	15	14	1	1298	1298	 An integer constant of 'essentially signed' type is being converted to floating type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1298.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	370	15	14	1	1298	1298	 An integer constant of 'essentially signed' type is being converted to floating type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1298.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	374	14	13	1	4437	4437	 A constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4437.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	375	15	14	1	4437	4437	 A constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4437.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	376	15	14	1	4437	4437	 A constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4437.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	380	14	13	1	4437	4437	 A constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4437.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	381	15	14	1	4437	4437	 A constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4437.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	382	15	14	1	4437	4437	 A constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4437.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	386	14	13	1	4435	4435	 A non-constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4435.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	387	15	14	1	4435	4435	 A non-constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4435.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-signed.c	Rule-10	388	15	14	1	4435	4435	 A non-constant expression of 'essentially signed' type (signed char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4435.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	251	22	21	1	1295	1295	 An integer constant of 'essentially unsigned' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1295.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	252	13	12	1	1295	1295	 An integer constant of 'essentially unsigned' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1295.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	253	13	12	1	1295	1295	 An integer constant of 'essentially unsigned' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1295.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	254	15	14	1	1295	1295	 An integer constant of 'essentially unsigned' type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1295.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	258	22	21	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	259	13	12	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	260	13	12	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	261	15	14	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	265	22	21	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	266	13	12	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	267	13	12	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	268	15	14	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned char) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	272	22	21	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned long) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	273	13	12	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned long) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	274	13	12	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned long) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	275	15	14	1	4440	4440	 An expression of 'essentially unsigned' type (unsigned long) is being converted to Boolean type, '_Bool' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4440.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	283	22	21	1	1293	1293	 An integer constant of 'essentially unsigned' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1293.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	284	13	12	1	1293	1293	 An integer constant of 'essentially unsigned' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1293.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	285	13	12	1	1293	1293	 An integer constant of 'essentially unsigned' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1293.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	286	15	14	1	1293	1293	 An integer constant of 'essentially unsigned' type is being converted to type char on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1293.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	290	22	21	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	291	13	12	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	292	13	12	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	293	15	14	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	297	22	21	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	298	13	12	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	299	13	12	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	300	15	14	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned char) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	304	22	21	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned long) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	305	13	12	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned long) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	306	13	12	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned long) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	307	15	14	1	4441	4441	 An expression of 'essentially unsigned' type (unsigned long) is being converted to character type, 'char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4441.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	315	13	12	1	1297	1297	 An integer constant of 'essentially unsigned' type is being converted to enum type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1297.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	316	13	12	1	1297	1297	 An integer constant of 'essentially unsigned' type is being converted to enum type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1297.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	317	15	14	1	1297	1297	 An integer constant of 'essentially unsigned' type is being converted to enum type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1297.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	321	13	12	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	322	13	12	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	323	15	14	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	327	13	12	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	328	13	12	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	329	15	14	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned char) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	333	13	12	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned long) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	334	13	12	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned long) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	335	15	14	1	4442	4442	 An expression of 'essentially unsigned' type (unsigned long) is being converted to enum type, 'TN1' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4442.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	343	14	13	1	1291	1291	 An integer constant of 'essentially unsigned' type is being converted to signed type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1291.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	344	14	13	1	1291	1291	 An integer constant of 'essentially unsigned' type is being converted to signed type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1291.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	345	15	14	1	1291	1291	 An integer constant of 'essentially unsigned' type is being converted to signed type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1291.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	349	14	13	1	4447	4447	 A constant expression of 'essentially unsigned' type (unsigned char) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4447.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	350	14	13	1	4447	4447	 A constant expression of 'essentially unsigned' type (unsigned char) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4447.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	351	15	14	1	4447	4447	 A constant expression of 'essentially unsigned' type (unsigned char) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4447.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	355	14	13	1	4443	4443	 A non-constant expression of 'essentially unsigned' type (unsigned char) is being converted to a wider signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4443.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	356	14	13	1	4443	4443	 A non-constant expression of 'essentially unsigned' type (unsigned char) is being converted to a wider signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4443.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	357	15	14	1	4443	4443	 A non-constant expression of 'essentially unsigned' type (unsigned char) is being converted to a wider signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4443.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	361	14	13	1	4446	4446	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4446.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	362	14	13	1	4446	4446	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4446.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	363	15	14	1	4446	4446	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4446.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	371	14	13	1	1299	1299	 An integer constant of 'essentially unsigned' type is being converted to floating type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1299.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	372	15	14	1	1299	1299	 An integer constant of 'essentially unsigned' type is being converted to floating type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1299.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	373	15	14	1	1299	1299	 An integer constant of 'essentially unsigned' type is being converted to floating type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1299.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	377	14	13	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	378	15	14	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	379	15	14	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	383	14	13	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	384	15	14	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	385	15	14	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned char) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	389	14	13	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned long) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	390	15	14	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned long) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-from-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-from-unsigned.c	Rule-10	391	15	14	1	4445	4445	 An expression of 'essentially unsigned' type (unsigned long) is being converted to floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4445.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	248	14	13	1	4465	4465	 A constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	249	15	14	1	4465	4465	 A constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	250	15	14	1	4465	4465	 A constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	254	14	13	1	4465	4465	 A constant expression of 'essentially floating' type (double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	255	15	14	1	4465	4465	 A constant expression of 'essentially floating' type (double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	256	15	14	1	4465	4465	 A constant expression of 'essentially floating' type (double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	266	14	13	1	4462	4462	 A non-constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	267	15	14	1	4462	4462	 A non-constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	268	15	14	1	4462	4462	 A non-constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	272	14	13	1	4462	4462	 A non-constant expression of 'essentially floating' type (double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	273	15	14	1	4462	4462	 A non-constant expression of 'essentially floating' type (double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	274	15	14	1	4462	4462	 A non-constant expression of 'essentially floating' type (double) is being converted to narrower floating type, 'float' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	288	14	13	1	4465	4465	 A constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	289	15	14	1	4465	4465	 A constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	290	15	14	1	4465	4465	 A constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4465.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	306	14	13	1	4462	4462	 A non-constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	307	15	14	1	4462	4462	 A non-constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-floating.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-floating.c	Rule-10	308	15	14	1	4462	4462	 A non-constant expression of 'essentially floating' type (long double) is being converted to narrower floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4462.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	250	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	251	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	252	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	256	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	257	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	258	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	262	13	12	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	263	13	12	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	264	15	14	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	268	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	269	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	270	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	280	13	12	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed int) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	281	13	12	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed int) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	282	15	14	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed int) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	286	13	12	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	287	13	12	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	288	15	14	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	292	13	12	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	293	13	12	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	294	15	14	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	303	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	304	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	305	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	309	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	310	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	311	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	315	14	13	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	316	14	13	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	317	15	14	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	321	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	322	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	323	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	339	14	13	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	340	14	13	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	341	15	14	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	345	14	13	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	346	14	13	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	347	15	14	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	361	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	362	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	363	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	367	14	13	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	368	14	13	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	369	15	14	1	4463	4463	 A constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4463.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	373	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	374	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	375	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	397	14	13	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	398	14	13	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-signed.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-signed.c	Rule-10	399	15	14	1	4460	4460	 A non-constant expression of 'essentially signed' type (signed long long) is being converted to narrower signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4460.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	251	13	12	1	2900	2900	 Constant: Positive integer value truncated by implicit conversion to a smaller unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2900.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	252	13	12	1	2900	2900	 Constant: Positive integer value truncated by implicit conversion to a smaller unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2900.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	253	15	14	1	2900	2900	 Constant: Positive integer value truncated by implicit conversion to a smaller unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2900.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	257	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	258	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	259	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	263	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	264	13	12	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	265	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	269	13	12	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	270	13	12	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	271	15	14	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	275	13	12	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	276	13	12	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	277	15	14	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	287	13	12	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned int) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	288	13	12	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned int) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	289	15	14	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned int) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	293	13	12	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	294	13	12	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	295	15	14	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned char' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	309	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	310	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	311	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	315	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	316	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	317	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	321	14	13	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	322	14	13	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	323	15	14	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	327	14	13	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	328	14	13	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	329	15	14	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	345	14	13	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	346	14	13	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	347	15	14	1	4461	4461	 A non-constant expression of 'essentially unsigned' type (unsigned long) is being converted to narrower unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4461.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	367	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	368	14	13	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	369	15	14	1	1257	1257	 An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1257.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	379	14	13	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	380	14	13	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-narrow-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-narrow-unsigned.c	Rule-10	381	15	14	1	4464	4464	 A constant expression of 'essentially unsigned' type (unsigned long long) is being converted to narrower unsigned type, 'unsigned long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4464.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	239	10	9	1	570	0570	 This switch case label of 'essential type' 'signed char', is not consistent with a controlling expression of essential type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	241	10	9	1	570	0570	 This switch case label of 'essential type' 'char', is not consistent with a controlling expression of essential type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	243	10	9	1	570	0570	 This switch case label of 'essential type' 'TN1', is not consistent with a controlling expression of essential type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	245	10	9	1	570	0570	 This switch case label of 'essential type' 'signed char', is not consistent with a controlling expression of essential type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	255	10	9	1	570	0570	 This switch case label of 'essential type' 'unsigned char', is not consistent with a controlling expression of essential type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	257	10	9	1	570	0570	 This switch case label of 'essential type' 'char', is not consistent with a controlling expression of essential type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	259	10	9	1	570	0570	 This switch case label of 'essential type' 'TN1', is not consistent with a controlling expression of essential type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0570.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	272	10	9	1	572	0572	 This switch case label of 'essential type' 'unsigned long' is not consistent with a controlling expression which has an essential type of lower rank (unsigned int).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0572.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	274	10	9	1	572	0572	 This switch case label of 'essential type' 'unsigned long' is not consistent with a controlling expression which has an essential type of lower rank (unsigned int).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0572.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	282	10	9	1	572	0572	 This switch case label of 'essential type' 'signed long' is not consistent with a controlling expression which has an essential type of lower rank (signed int).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0572.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.03-switch.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.03-switch.c	Rule-10	284	10	9	1	572	0572	 This switch case label of 'essential type' 'signed long' is not consistent with a controlling expression which has an essential type of lower rank (signed int).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0572.html	The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.	M3CM Rule-10.3	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	154	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (char and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	155	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (char and signed).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	156	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (char and unsigned).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	157	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (char and floating).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	159	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (enum and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	160	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (enum and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	161	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (enum and signed).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	162	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (enum and unsigned).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	163	9	8	1	1802	1802	 The left-hand operand (essential type: 'TN1') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	165	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (signed and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	166	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (signed and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	167	9	8	1	1802	1802	 The left-hand operand (essential type: 'signed char') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	169	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (unsigned and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	170	9	8	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (unsigned and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	171	9	8	1	1802	1802	 The left-hand operand (essential type: 'unsigned char') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	173	10	9	1	1880	1880	 The operands of this relational operator are expressions of different 'essential type' categories (floating and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1880.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	174	10	9	1	1802	1802	 The right-hand operand (essential type: 'TN2') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	175	10	9	1	1802	1802	 The right-hand operand (essential type: 'signed int') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	176	10	9	1	1802	1802	 The right-hand operand (essential type: 'unsigned int') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	182	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (char and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	183	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (char and signed).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	184	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (char and unsigned).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	185	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (char and floating).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	187	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (enum and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	188	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (enum and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	189	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (enum and signed).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	190	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (enum and unsigned).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	191	9	8	1	1803	1803	 The left-hand operand (essential type: 'TN1') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	193	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (signed and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	194	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (signed and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	195	9	8	1	1803	1803	 The left-hand operand (essential type: 'signed char') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	197	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (unsigned and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	198	9	8	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (unsigned and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	199	9	8	1	1803	1803	 The left-hand operand (essential type: 'unsigned char') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	201	10	9	1	1881	1881	 The operands of this equality operator are expressions of different 'essential type' categories (floating and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1881.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	202	10	9	1	1803	1803	 The right-hand operand (essential type: 'TN2') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	203	10	9	1	1803	1803	 The right-hand operand (essential type: 'signed int') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	204	10	9	1	1803	1803	 The right-hand operand (essential type: 'unsigned int') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	210	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (char and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	211	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (char and signed).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	212	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (char and unsigned).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	213	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (char and floating).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	215	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (enum and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	216	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (enum and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	217	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (enum and signed).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	218	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (enum and unsigned).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	219	19	18	1	1804	1804	 The 2nd operand (essential type: 'TN1') will be implicitly converted to a floating type, 'float', in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1804.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	221	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (signed and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	222	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (signed and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	223	19	18	1	1804	1804	 The 2nd operand (essential type: 'signed char') will be implicitly converted to a floating type, 'float', in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1804.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	225	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (unsigned and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	226	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (unsigned and enum).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	227	19	18	1	1804	1804	 The 2nd operand (essential type: 'unsigned char') will be implicitly converted to a floating type, 'float', in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1804.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	229	19	18	1	1882	1882	 The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (floating and char).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1882.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	230	19	18	1	1804	1804	 The 3rd operand (essential type: 'TN2') will be implicitly converted to a floating type, 'float', in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1804.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	231	19	18	1	1804	1804	 The 3rd operand (essential type: 'signed int') will be implicitly converted to a floating type, 'float', in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1804.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-compare.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-compare.c	Rule-10	232	19	18	1	1804	1804	 The 3rd operand (essential type: 'unsigned int') will be implicitly converted to a floating type, 'float', in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1804.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	149	10	9	1	1800	1800	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1800.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	150	10	9	1	1800	1800	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1800.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	151	10	9	1	1800	1800	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1800.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	152	10	9	1	1800	1800	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1800.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	153	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	155	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	156	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	157	10	9	1	496	0496	 [C] Right operand of '%', '<<', '>>', '&', '^' or '|' must have integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0496.html	The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits	M3CM Rule-1.1	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	159	10	9	1	1802	1802	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	160	10	9	1	1802	1802	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	161	10	9	1	1802	1802	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	162	10	9	1	1802	1802	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1802.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	164	10	9	1	1803	1803	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	165	10	9	1	1803	1803	 The left-hand operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1803.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-integer-float.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-integer-float.c	Rule-10	167	19	18	1	1804	1804	 The 2nd operand (essential type: 'signed long') will be implicitly converted to a floating type, 'float', in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1804.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	155	10	9	1	1820	1820	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1820.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	156	10	9	1	1820	1820	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1820.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	157	10	9	1	1820	1820	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1820.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	158	10	9	1	1820	1820	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1820.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	159	10	9	1	1820	1820	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1820.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	161	10	9	1	1821	1821	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1821.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	161	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed long) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	162	10	9	1	1821	1821	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1821.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	162	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed long) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	163	10	9	1	1821	1821	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1821.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	163	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed long) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	165	10	9	1	1822	1822	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1822.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	166	10	9	1	1822	1822	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1822.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	167	10	9	1	1822	1822	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1822.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	168	10	9	1	1822	1822	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1822.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	170	10	9	1	1823	1823	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1823.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	171	10	9	1	1823	1823	 The left-hand operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1823.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	173	19	18	1	1824	1824	 The 2nd operand is non-constant and 'essentially signed' (signed long) but will be implicitly converted to an unsigned type (unsigned long) in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1824.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	179	10	9	1	1830	1830	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1830.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	179	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	180	10	9	1	1830	1830	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1830.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	180	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	181	10	9	1	1830	1830	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1830.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	181	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	182	10	9	1	1830	1830	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1830.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	182	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	183	10	9	1	1830	1830	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1830.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	183	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	185	10	9	1	1831	1831	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1831.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	185	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	185	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	186	10	9	1	1831	1831	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1831.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	186	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	186	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	187	10	9	1	1831	1831	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1831.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	187	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	187	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	189	10	9	1	1832	1832	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1832.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	189	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	190	10	9	1	1832	1832	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1832.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	190	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	191	10	9	1	1832	1832	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1832.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	191	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	192	10	9	1	1832	1832	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1832.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	192	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	194	10	9	1	1833	1833	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1833.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	194	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	195	10	9	1	1833	1833	 The left-hand operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1833.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	195	10	9	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	197	19	18	1	1834	1834	 The 2nd operand is constant, 'essentially signed' (signed char) and negative but will be implicitly converted to an unsigned type (unsigned long) in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1834.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	197	19	18	1	2890	2890	 Constant: Negative value implicitly converted to an unsigned type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2890.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	203	10	9	1	1840	1840	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1840.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	204	10	9	1	1840	1840	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1840.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	205	10	9	1	1840	1840	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1840.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	206	10	9	1	1840	1840	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1840.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	207	10	9	1	1840	1840	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1840.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	209	10	9	1	1841	1841	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1841.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	209	10	9	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed short) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	210	10	9	1	1841	1841	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1841.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	210	10	9	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed short) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	211	10	9	1	1841	1841	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1841.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	211	10	9	1	4542	4542	 A non-negative constant expression of 'essentially signed' type (signed short) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4542.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	213	10	9	1	1842	1842	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1842.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	214	10	9	1	1842	1842	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1842.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	215	10	9	1	1842	1842	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1842.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	216	10	9	1	1842	1842	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1842.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	218	10	9	1	1843	1843	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1843.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	219	10	9	1	1843	1843	 The left-hand operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1843.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	221	19	18	1	1844	1844	 The 2nd operand is constant, 'essentially signed' (signed short) and non-negative but will be implicitly converted to an unsigned type (unsigned long) in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1844.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	227	10	9	1	1850	1850	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1850.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	228	10	9	1	1850	1850	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1850.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	229	10	9	1	1850	1850	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1850.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	230	10	9	1	1850	1850	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1850.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	231	10	9	1	1850	1850	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1850.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	233	10	9	1	1851	1851	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1851.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	233	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed long) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	234	10	9	1	1851	1851	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1851.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	234	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed long) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	235	10	9	1	1851	1851	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this bitwise operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1851.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	235	10	9	1	4532	4532	 An expression of 'essentially signed' type (signed long) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	237	10	9	1	1852	1852	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1852.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	238	10	9	1	1852	1852	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1852.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	239	10	9	1	1852	1852	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1852.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	240	10	9	1	1852	1852	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this relational operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1852.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	242	10	9	1	1853	1853	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1853.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	243	10	9	1	1853	1853	 The right-hand operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this equality operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1853.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	245	19	18	1	1854	1854	 The 3rd operand is 'essentially unsigned' (unsigned int) but will be implicitly converted to a signed type (signed long) in this conditional operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1854.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	251	9	8	1	1860	1860	 The operands of this arithmetic operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1860.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	252	9	8	1	1860	1860	 The operands of this arithmetic operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1860.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	253	9	8	1	1860	1860	 The operands of this arithmetic operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1860.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	254	9	8	1	1860	1860	 The operands of this arithmetic operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1860.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	255	9	8	1	1860	1860	 The operands of this arithmetic operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1860.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	257	9	8	1	1861	1861	 The operands of this bitwise operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1861.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	257	9	8	1	4532	4532	 An expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (&).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	258	9	8	1	1861	1861	 The operands of this bitwise operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1861.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	258	9	8	1	4532	4532	 An expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (|).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	259	9	8	1	1861	1861	 The operands of this bitwise operator are of different 'essential signedness' but will generate a result of type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1861.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	259	9	8	1	4532	4532	 An expression of 'essentially signed' type (signed char) is being used as the left-hand operand of this bitwise operator (^).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4532.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	261	9	8	1	1862	1862	 The operands of this relational operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1862.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	262	9	8	1	1862	1862	 The operands of this relational operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1862.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	263	9	8	1	1862	1862	 The operands of this relational operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1862.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	264	9	8	1	1862	1862	 The operands of this relational operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1862.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	266	9	8	1	1863	1863	 The operands of this equality operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1863.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	267	9	8	1	1863	1863	 The operands of this equality operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1863.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.04-signed-unsigned.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.04-signed-unsigned.c	Rule-10	269	19	18	1	1864	1864	 The 2nd and 3rd operands of this conditional operator are of different 'essential signedness'. The result will be in the promoted type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1864.html	Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category	M3CM Rule-10.4	7
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	74	5	4	1	4301	4301	 An expression of 'essentially Boolean' type (_Bool) is being cast to character type 'char'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4301.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	75	5	4	1	4302	4302	 An expression of 'essentially Boolean' type (_Bool) is being cast to enum type 'TN1'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4302.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	76	5	4	1	4303	4303	 An expression of 'essentially Boolean' type (_Bool) is being cast to signed type 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4303.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	77	5	4	1	4304	4304	 An expression of 'essentially Boolean' type (_Bool) is being cast to unsigned type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4304.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	78	5	4	1	4305	4305	 An expression of 'essentially Boolean' type (_Bool) is being cast to floating type 'float'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4305.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	80	5	4	1	4310	4310	 An expression of 'essentially character' type (char) is being cast to Boolean type, '_Bool'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4310.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	82	5	4	1	4312	4312	 An expression of 'essentially character' type (char) is being cast to enum type, 'TN1'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4312.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	85	5	4	1	4315	4315	 An expression of 'essentially character' type (char) is being cast to floating type, 'float'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4315.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	87	5	4	1	4320	4320	 An expression of 'essentially enum' type (TN1) is being cast to Boolean type, '_Bool'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4320.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	89	5	4	1	4322	4322	 An expression of 'essentially enum' type (TN1) is being cast to a different enum type, 'TN2'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4322.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	94	5	4	1	4330	4330	 An expression of 'essentially signed' type (signed int) is being cast to Boolean type '_Bool'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4330.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	96	5	4	1	4332	4332	 An expression of 'essentially signed' type (signed int) is being cast to enum type, 'TN1'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4332.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	101	5	4	1	4340	4340	 An expression of 'essentially unsigned' type (unsigned int) is being cast to Boolean type '_Bool'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4340.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	103	5	4	1	4342	4342	 An expression of 'essentially unsigned' type (unsigned int) is being cast to enum type 'TN1'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4342.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	108	5	4	1	4350	4350	 An expression of 'essentially floating' type (float) is being cast to Boolean type '_Bool'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4350.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	109	5	4	1	4351	4351	 An expression of 'essentially floating' type (float) is being cast to character type 'char'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4351.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.05.c	Rule-10	110	5	4	1	4352	4352	 An expression of 'essentially floating' type (float) is being cast to enum type, 'TN1'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4352.html	The value of an expression should not be cast to an inappropriate essential type	M3CM Rule-10.5	5
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	52	24	23	1	4490	4490	 A composite expression of 'essentially signed' type (signed char) is being converted to wider signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4490.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	53	10	9	1	4490	4490	 A composite expression of 'essentially signed' type (signed char) is being converted to wider signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4490.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	54	10	9	1	4490	4490	 A composite expression of 'essentially signed' type (signed char) is being converted to wider signed type, 'signed int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4490.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	55	11	10	1	4490	4490	 A composite expression of 'essentially signed' type (signed char) is being converted to wider signed type, 'signed long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4490.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	60	25	24	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	61	10	9	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	62	10	9	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	63	11	10	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	68	22	21	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	69	10	9	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	70	10	9	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	71	11	10	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	76	25	24	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	76	25	24	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	77	10	9	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	77	10	9	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	78	10	9	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned int' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	78	10	9	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	79	11	10	1	4491	4491	 A composite expression of 'essentially unsigned' type (unsigned char) is being converted to wider unsigned type, 'unsigned long' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4491.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	79	11	10	1	4499	4499	 An expression which is the result of a ~ or << operation has been converted to a wider essential type on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4499.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	84	27	26	1	4492	4492	 A composite expression of 'essentially floating' type (float) is being converted to wider floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4492.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	85	10	9	1	4492	4492	 A composite expression of 'essentially floating' type (float) is being converted to wider floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4492.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	86	11	10	1	4492	4492	 A composite expression of 'essentially floating' type (float) is being converted to wider floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4492.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.06.c	Rule-10	87	11	10	1	4492	4492	 A composite expression of 'essentially floating' type (float) is being converted to wider floating type, 'double' on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4492.html	The value of a composite expression shall not be assigned to an object with wider essential type	M3CM Rule-10.6	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	53	9	8	1	1890	1890	 A composite expression of 'essentially signed' type (signed char) is being implicitly converted to a wider signed type, 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1890.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	54	9	8	1	1891	1891	 A composite expression of 'essentially unsigned' type (unsigned char) is being implicitly converted to a wider unsigned type, 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1891.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	55	12	11	1	4397	4397	 An expression which is the result of a ~ or << operation has not been cast to its essential type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4397.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	56	9	8	1	1891	1891	 A composite expression of 'essentially unsigned' type (unsigned char) is being implicitly converted to a wider unsigned type, 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1891.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	56	12	11	1	4397	4397	 An expression which is the result of a ~ or << operation has not been cast to its essential type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4397.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	57	9	8	1	1892	1892	 A composite expression of 'essentially floating' type (float) is being implicitly converted to a wider floating type, 'double'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1892.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	59	9	8	1	1893	1893	 The 2nd and 3rd operands of this conditional operator are both 'essentially signed' ('signed int' and 'signed char') but one is a composite expression of a narrower type than the other.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1893.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	60	9	8	1	1894	1894	 The 2nd and 3rd operands of this conditional operator are both 'essentially unsigned' ('unsigned int' and 'unsigned char') but one is a composite expression of a narrower type than the other.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1894.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	61	18	17	1	4397	4397	 An expression which is the result of a ~ or << operation has not been cast to its essential type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4397.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	62	9	8	1	1894	1894	 The 2nd and 3rd operands of this conditional operator are both 'essentially unsigned' ('unsigned int' and 'unsigned char') but one is a composite expression of a narrower type than the other.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1894.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	62	18	17	1	4397	4397	 An expression which is the result of a ~ or << operation has not been cast to its essential type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4397.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.07.c	Rule-10	63	9	8	1	1895	1895	 The 2nd and 3rd operands of this conditional operator are both 'essentially floating' ('double' and 'float') but one is a composite expression of a narrower type than the other.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1895.html	If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type	M3CM Rule-10.7	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	46	5	4	1	4393	4393	 A composite expression of 'essentially signed' type (signed char) is being cast to a different type category, 'unsigned'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4393.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	47	5	4	1	4394	4394	 A composite expression of 'essentially unsigned' type (unsigned char) is being cast to a different type category, 'floating'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4394.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	48	5	4	1	4398	4398	 An expression which is the result of a ~ or << operation has been cast to a different essential type category.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4398.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	49	5	4	1	4394	4394	 A composite expression of 'essentially unsigned' type (unsigned char) is being cast to a different type category, 'floating'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4394.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	49	5	4	1	4398	4398	 An expression which is the result of a ~ or << operation has been cast to a different essential type category.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4398.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	50	5	4	1	4395	4395	 A composite expression of 'essentially floating' type (float) is being cast to a different type category, 'signed'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4395.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	52	5	4	1	4390	4390	 A composite expression of 'essentially signed' type (signed char) is being cast to a wider signed type, 'signed int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4390.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	53	5	4	1	4391	4391	 A composite expression of 'essentially unsigned' type (unsigned char) is being cast to a wider unsigned type, 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4391.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	54	5	4	1	4399	4399	 An expression which is the result of a ~ or << operation has been cast to a wider type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4399.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	55	5	4	1	4391	4391	 A composite expression of 'essentially unsigned' type (unsigned char) is being cast to a wider unsigned type, 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4391.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	55	5	4	1	4399	4399	 An expression which is the result of a ~ or << operation has been cast to a wider type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4399.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-10.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-10.08.c	Rule-10	56	5	4	1	4392	4392	 A composite expression of 'essentially floating' type (float) is being cast to a wider floating type, 'double'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4392.html	The value of a composite expression shall not be cast to a different essential type category or a wider essential type	M3CM Rule-10.8	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	42	16	15	1	313	0313	 Casting to different function pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0313.html	Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	43	16	15	1	305	0305	 [I] Cast between a pointer to function and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0305.html	Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	44	16	15	1	302	0302	 [u] Cast between a pointer to function and a floating type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0302.html	There shall be no occurrence of undefined or critical unspecified behaviour, Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-1.3, M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	50	5	4	1	305	0305	 [I] Cast between a pointer to function and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0305.html	Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	51	5	4	1	305	0305	 [I] Cast between a pointer to function and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0305.html	Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	52	5	4	1	302	0302	 [u] Cast between a pointer to function and a floating type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0302.html	There shall be no occurrence of undefined or critical unspecified behaviour, Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-1.3, M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	53	5	4	1	307	0307	 [u] Cast between a pointer to object and a pointer to function.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0307.html	There shall be no occurrence of undefined or critical unspecified behaviour, Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-1.3, M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	54	5	4	1	313	0313	 Casting to different function pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0313.html	Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-11.1	7
++ WARNING ++	Rule-11.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.01.c	Rule-11	55	5	4	1	307	0307	 [u] Cast between a pointer to object and a pointer to function.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0307.html	There shall be no occurrence of undefined or critical unspecified behaviour, Conversions shall not be performed between a pointer to a function and any other type	M3CM Rule-1.3, M3CM Rule-11.1	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	32	5	4	1	308	0308	 Non-portable cast involving pointer to an incomplete type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0308.html	Conversions shall not be performed between a pointer to an incomplete type and any other type	M3CM Rule-11.2	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	32	5	4	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	33	5	4	1	308	0308	 Non-portable cast involving pointer to an incomplete type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0308.html	Conversions shall not be performed between a pointer to an incomplete type and any other type	M3CM Rule-11.2	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	33	5	4	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	39	5	4	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	40	5	4	1	308	0308	 Non-portable cast involving pointer to an incomplete type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0308.html	Conversions shall not be performed between a pointer to an incomplete type and any other type	M3CM Rule-11.2	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	40	5	4	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	41	5	4	1	308	0308	 Non-portable cast involving pointer to an incomplete type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0308.html	Conversions shall not be performed between a pointer to an incomplete type and any other type	M3CM Rule-11.2	7
++ WARNING ++	Rule-11.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.02.c	Rule-11	41	5	4	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	32	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	33	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	34	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	34	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	35	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	35	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	36	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	36	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	38	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	39	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	40	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	40	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	41	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	41	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	42	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	42	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	44	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	45	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	46	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	46	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	47	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	47	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	48	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	48	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	50	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	51	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	52	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	53	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	53	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	54	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	54	11	10	1	3305	3305	 Pointer cast to stricter alignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3305.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	56	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	57	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	58	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	59	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	60	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	62	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	63	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	64	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	65	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.03.c	Rule-11	66	11	10	1	310	0310	 Casting to different object pointer type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0310.html	A cast shall not be performed between a pointer to object type and a pointer to a different object type	M3CM Rule-11.3	7
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	42	12	11	1	303	0303	 [I] Cast between a pointer to volatile object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0303.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	43	12	11	1	303	0303	 [I] Cast between a pointer to volatile object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0303.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	45	12	11	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	46	12	11	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	47	12	11	1	362	0362	 An expression of essentially Boolean type is being cast to a pointer.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0362.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	49	9	8	1	360	0360	 An expression of pointer type is being converted to type _Bool on assignment.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0360.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	50	11	10	1	361	0361	 An expression of pointer type is being cast to type _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0361.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	52	11	10	1	303	0303	 [I] Cast between a pointer to volatile object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0303.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.04.c	Rule-11	53	11	10	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.05.c	Rule-11	31	10	9	1	316	0316	 [I] Cast from a pointer to void to a pointer to object type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0316.html	A conversion should not be performed from pointer to void into pointer to object	M3CM Rule-11.5	5
++ WARNING ++	Rule-11.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.05.c	Rule-11	32	8	7	1	317	0317	 [I] Implicit conversion from a pointer to void to a pointer to object type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0317.html	A conversion should not be performed from pointer to void into pointer to object	M3CM Rule-11.5	5
++ WARNING ++	Rule-11.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.06.c	Rule-11	26	10	9	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.06.c	Rule-11	27	10	9	1	301	0301	 [u] Cast between a pointer to object and a floating type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0301.html	There shall be no occurrence of undefined or critical unspecified behaviour, A cast shall not be performed between pointer to object and a non-integer arithmetic type	M3CM Rule-1.3, M3CM Rule-11.7	7
++ WARNING ++	Rule-11.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.06.c	Rule-11	29	12	11	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	26	5	4	1	361	0361	 An expression of pointer type is being cast to type _Bool.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0361.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	27	5	4	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	27	5	4	1	309	0309	 [U] Integral type is not large enough to hold a pointer value.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0309.html	There shall be no occurrence of undefined or critical unspecified behaviour	M3CM Rule-1.3	7
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	28	5	4	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	29	5	4	1	301	0301	 [u] Cast between a pointer to object and a floating type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0301.html	There shall be no occurrence of undefined or critical unspecified behaviour, A cast shall not be performed between pointer to object and a non-integer arithmetic type	M3CM Rule-1.3, M3CM Rule-11.7	7
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	31	5	4	1	362	0362	 An expression of essentially Boolean type is being cast to a pointer.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0362.html	A conversion should not be performed between a pointer to object and an integer type	M3CM Rule-11.4	5
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	32	5	4	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	33	5	4	1	306	0306	 [I] Cast between a pointer to object and an integral type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0306.html	A conversion should not be performed between a pointer to object and an integer type, A cast shall not be performed between pointer to void and an arithmetic type	M3CM Rule-11.4, M3CM Rule-11.6	7
++ WARNING ++	Rule-11.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.07.c	Rule-11	34	5	4	1	301	0301	 [u] Cast between a pointer to object and a floating type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0301.html	There shall be no occurrence of undefined or critical unspecified behaviour, A cast shall not be performed between pointer to object and a non-integer arithmetic type	M3CM Rule-1.3, M3CM Rule-11.7	7
++ WARNING ++	Rule-11.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.08.c	Rule-11	31	12	11	1	311	0311	 Dangerous pointer cast results in loss of const qualification.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0311.html	A cast shall not remove any const or volatile qualification from the type pointed to by a pointer	M3CM Rule-11.8	7
++ WARNING ++	Rule-11.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.08.c	Rule-11	32	12	11	1	312	0312	 Dangerous pointer cast results in loss of volatile qualification.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0312.html	A cast shall not remove any const or volatile qualification from the type pointed to by a pointer	M3CM Rule-11.8	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	35	17	16	1	3004	3004	 This integral constant expression is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3004.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	36	20	19	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	39	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	40	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	41	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	42	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	43	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	45	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	46	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	47	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	48	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	49	21	20	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	58	15	14	1	3004	3004	 This integral constant expression is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3004.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	61	12	11	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	70	19	18	1	3004	3004	 This integral constant expression is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3004.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	75	16	15	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	90	11	10	1	3004	3004	 This integral constant expression is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3004.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-11.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-11.09.c	Rule-11	91	9	8	1	3003	3003	 This character constant is being interpreted as a NULL pointer constant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3003.html	The macro NULL shall be the only permitted form of integer null pointer constant	M3CM Rule-11.9	7
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	168	16	15	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	168	16	15	1	3390	3390	 Expression is equivalent to: "d = (a == b) ? a : (a - b)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	586	11	10	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	586	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) % c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	587	11	10	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	587	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) + c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	588	11	10	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	588	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) - c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	589	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	589	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	590	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	590	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	591	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	591	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	592	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	592	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) << c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	593	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	593	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) >> c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	594	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	594	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	595	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	595	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	596	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	596	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	597	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	597	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	598	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	598	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	599	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	599	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	600	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	600	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	601	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	601	11	10	1	3390	3390	 Expression is equivalent to: "(a * b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	612	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	612	11	10	1	3390	3390	 Expression is equivalent to: "(a * d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	613	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	613	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b * d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	614	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	614	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c * d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	631	11	10	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	631	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) % c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	632	11	10	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	632	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) + c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	633	11	10	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	633	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) - c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	634	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	634	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	635	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	635	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	636	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	636	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	637	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	637	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) << c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	638	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	638	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) >> c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	639	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	639	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	640	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	640	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	641	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	641	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	642	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	642	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	643	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	643	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	644	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	644	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	645	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	645	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	646	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	646	11	10	1	3390	3390	 Expression is equivalent to: "(a / b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	657	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	657	11	10	1	3390	3390	 Expression is equivalent to: "(a / d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	658	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	658	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b / d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	659	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	659	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c / d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	675	11	10	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	675	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) * c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	676	11	10	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	676	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) / c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	677	11	10	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	677	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) % c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	678	11	10	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	678	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) + c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	679	11	10	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	679	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) - c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	680	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	680	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	681	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	681	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	682	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	682	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	683	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	683	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) << c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	684	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	684	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) >> c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	685	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	685	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	686	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	686	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	687	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	687	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	688	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	688	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	689	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	689	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	690	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	690	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	691	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	691	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	692	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	692	11	10	1	3390	3390	 Expression is equivalent to: "(a % b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	703	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	703	11	10	1	3390	3390	 Expression is equivalent to: "(a % d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	704	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	704	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b % d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	705	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	705	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c % d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	721	7	6	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	721	7	6	1	3390	3390	 Expression is equivalent to: "a + (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	722	7	6	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	722	7	6	1	3390	3390	 Expression is equivalent to: "a + (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	723	7	6	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	723	7	6	1	3390	3390	 Expression is equivalent to: "a + (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	726	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	726	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	727	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	727	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	728	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	728	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	729	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	729	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) << c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	730	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	730	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) >> c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	731	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	731	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	732	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	732	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	733	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	733	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	734	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	734	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	735	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	735	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	736	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	736	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	737	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	737	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	738	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	738	11	10	1	3390	3390	 Expression is equivalent to: "(a + b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	749	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	749	11	10	1	3390	3390	 Expression is equivalent to: "(a + d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	750	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	750	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b + d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	751	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	751	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c + d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	766	7	6	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	766	7	6	1	3390	3390	 Expression is equivalent to: "a - (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	767	7	6	1	3395	3395	 Extra parentheses recommended. A * or / operation is the operand of a + or - operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3395.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	767	7	6	1	3390	3390	 Expression is equivalent to: "a - (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	768	7	6	1	3389	3389	 Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3389.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	768	7	6	1	3390	3390	 Expression is equivalent to: "a - (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	771	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	771	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	772	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	772	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	773	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	773	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	774	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	774	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) << c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	775	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	775	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) >> c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	776	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	776	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	777	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	777	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	778	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	778	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	779	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	779	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	780	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	780	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	781	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	781	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	782	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	782	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	783	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	783	11	10	1	3390	3390	 Expression is equivalent to: "(a - b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	794	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	794	11	10	1	3390	3390	 Expression is equivalent to: "(a - d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	795	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	795	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b - d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	796	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	796	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c - d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	810	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	810	7	6	1	3390	3390	 Expression is equivalent to: "a << (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	811	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	811	7	6	1	3390	3390	 Expression is equivalent to: "a << (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	812	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	812	7	6	1	3390	3390	 Expression is equivalent to: "a << (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	813	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	813	7	6	1	3390	3390	 Expression is equivalent to: "a << (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	814	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	814	7	6	1	3390	3390	 Expression is equivalent to: "a << (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	815	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	815	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	816	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	816	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	817	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	817	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	818	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	818	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) << c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	819	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	819	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) >> c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	820	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	820	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	821	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	821	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	822	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	822	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	823	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	823	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	824	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	824	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	825	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	825	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	826	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	826	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	827	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	827	12	11	1	3390	3390	 Expression is equivalent to: "(a << b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	838	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	838	11	10	1	3390	3390	 Expression is equivalent to: "(a << d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	839	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	839	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b << d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	840	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	840	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c << d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	855	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	855	7	6	1	3390	3390	 Expression is equivalent to: "a >> (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	856	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	856	7	6	1	3390	3390	 Expression is equivalent to: "a >> (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	857	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	857	7	6	1	3390	3390	 Expression is equivalent to: "a >> (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	858	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	858	7	6	1	3390	3390	 Expression is equivalent to: "a >> (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	859	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	859	7	6	1	3390	3390	 Expression is equivalent to: "a >> (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	860	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	860	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	861	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	861	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	862	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	862	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	863	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	863	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) << c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	864	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	864	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) >> c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	865	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	865	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	866	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	866	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	867	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	867	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	868	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	868	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	869	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	869	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	870	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	870	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	871	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	871	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	872	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	872	12	11	1	3390	3390	 Expression is equivalent to: "(a >> b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	883	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	883	11	10	1	3390	3390	 Expression is equivalent to: "(a >> d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	884	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	884	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b >> d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	885	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	885	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c >> d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	899	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	899	7	6	1	3390	3390	 Expression is equivalent to: "a < (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	900	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	900	7	6	1	3390	3390	 Expression is equivalent to: "a < (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	901	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	901	7	6	1	3390	3390	 Expression is equivalent to: "a < (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	902	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	902	7	6	1	3390	3390	 Expression is equivalent to: "a < (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	903	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	903	7	6	1	3390	3390	 Expression is equivalent to: "a < (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	904	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	904	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	905	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	905	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	906	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	906	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	907	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	907	7	6	1	3390	3390	 Expression is equivalent to: "a < (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	908	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	908	7	6	1	3390	3390	 Expression is equivalent to: "a < (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	909	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	909	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	910	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	910	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	911	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	911	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	912	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	912	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	913	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	913	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	914	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	914	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	915	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	915	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	916	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	916	12	11	1	3390	3390	 Expression is equivalent to: "(a < b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	927	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	927	11	10	1	3390	3390	 Expression is equivalent to: "(a < d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	928	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	928	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b < d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	929	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	929	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c < d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	943	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	943	7	6	1	3390	3390	 Expression is equivalent to: "a <= (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	944	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	944	7	6	1	3390	3390	 Expression is equivalent to: "a <= (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	945	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	945	7	6	1	3390	3390	 Expression is equivalent to: "a <= (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	946	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	946	7	6	1	3390	3390	 Expression is equivalent to: "a <= (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	947	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	947	7	6	1	3390	3390	 Expression is equivalent to: "a <= (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	948	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	948	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	949	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	949	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	950	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	950	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	951	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	951	7	6	1	3390	3390	 Expression is equivalent to: "a <= (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	952	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	952	7	6	1	3390	3390	 Expression is equivalent to: "a <= (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	953	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	953	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	954	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	954	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	955	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	955	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	956	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	956	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	957	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	957	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	958	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	958	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	959	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	959	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	960	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	960	12	11	1	3390	3390	 Expression is equivalent to: "(a <= b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	971	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	971	11	10	1	3390	3390	 Expression is equivalent to: "(a <= d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	972	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	972	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b <= d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	973	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	973	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c <= d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	987	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	987	7	6	1	3390	3390	 Expression is equivalent to: "a >= (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	988	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	988	7	6	1	3390	3390	 Expression is equivalent to: "a >= (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	989	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	989	7	6	1	3390	3390	 Expression is equivalent to: "a >= (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	990	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	990	7	6	1	3390	3390	 Expression is equivalent to: "a >= (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	991	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	991	7	6	1	3390	3390	 Expression is equivalent to: "a >= (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	992	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	992	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	993	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	993	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	994	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	994	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	995	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	995	7	6	1	3390	3390	 Expression is equivalent to: "a >= (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	996	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	996	7	6	1	3390	3390	 Expression is equivalent to: "a >= (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	997	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	997	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	998	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	998	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	999	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	999	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1000	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1000	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1001	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1001	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1002	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1002	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1003	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1003	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1004	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1004	12	11	1	3390	3390	 Expression is equivalent to: "(a >= b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1015	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1015	11	10	1	3390	3390	 Expression is equivalent to: "(a >= d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1016	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1016	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b >= d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1017	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1017	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c >= d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1031	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1031	7	6	1	3390	3390	 Expression is equivalent to: "a > (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1032	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1032	7	6	1	3390	3390	 Expression is equivalent to: "a > (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1033	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1033	7	6	1	3390	3390	 Expression is equivalent to: "a > (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1034	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1034	7	6	1	3390	3390	 Expression is equivalent to: "a > (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1035	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1035	7	6	1	3390	3390	 Expression is equivalent to: "a > (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1036	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1036	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1037	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1037	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1038	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1038	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1039	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1039	7	6	1	3390	3390	 Expression is equivalent to: "a > (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1040	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1040	7	6	1	3390	3390	 Expression is equivalent to: "a > (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1041	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1041	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) < c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1042	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1042	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) <= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1043	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1043	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) >= c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1044	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1044	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) > c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1045	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1045	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1046	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1046	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1047	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1047	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1048	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1048	12	11	1	3390	3390	 Expression is equivalent to: "(a > b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1059	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1059	11	10	1	3390	3390	 Expression is equivalent to: "(a > d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1060	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1060	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b > d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1061	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1061	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c > d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1075	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1075	7	6	1	3390	3390	 Expression is equivalent to: "a == (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1076	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1076	7	6	1	3390	3390	 Expression is equivalent to: "a == (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1077	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1077	7	6	1	3390	3390	 Expression is equivalent to: "a == (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1078	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1078	7	6	1	3390	3390	 Expression is equivalent to: "a == (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1079	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1079	7	6	1	3390	3390	 Expression is equivalent to: "a == (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1080	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1080	12	11	1	3390	3390	 Expression is equivalent to: "(a == b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1081	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1081	12	11	1	3390	3390	 Expression is equivalent to: "(a == b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1082	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1082	12	11	1	3390	3390	 Expression is equivalent to: "(a == b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1083	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1083	7	6	1	3390	3390	 Expression is equivalent to: "a == (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1084	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1084	7	6	1	3390	3390	 Expression is equivalent to: "a == (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1085	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1085	7	6	1	3390	3390	 Expression is equivalent to: "a == (b < c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1086	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1086	7	6	1	3390	3390	 Expression is equivalent to: "a == (b <= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1087	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1087	7	6	1	3390	3390	 Expression is equivalent to: "a == (b >= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1088	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1088	7	6	1	3390	3390	 Expression is equivalent to: "a == (b > c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1089	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1089	12	11	1	3390	3390	 Expression is equivalent to: "(a == b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1090	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1090	12	11	1	3390	3390	 Expression is equivalent to: "(a == b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1091	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1091	12	11	1	3390	3390	 Expression is equivalent to: "(a == b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1092	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1092	12	11	1	3390	3390	 Expression is equivalent to: "(a == b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1103	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1103	11	10	1	3390	3390	 Expression is equivalent to: "(a == d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1104	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1104	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b == d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1105	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1105	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c == d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1120	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1120	7	6	1	3390	3390	 Expression is equivalent to: "a != (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1121	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1121	7	6	1	3390	3390	 Expression is equivalent to: "a != (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1122	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1122	7	6	1	3390	3390	 Expression is equivalent to: "a != (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1123	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1123	7	6	1	3390	3390	 Expression is equivalent to: "a != (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1124	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1124	7	6	1	3390	3390	 Expression is equivalent to: "a != (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1125	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1125	12	11	1	3390	3390	 Expression is equivalent to: "(a != b) & c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1126	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1126	12	11	1	3390	3390	 Expression is equivalent to: "(a != b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1127	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1127	12	11	1	3390	3390	 Expression is equivalent to: "(a != b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1128	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1128	7	6	1	3390	3390	 Expression is equivalent to: "a != (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1129	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1129	7	6	1	3390	3390	 Expression is equivalent to: "a != (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1130	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1130	7	6	1	3390	3390	 Expression is equivalent to: "a != (b < c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1131	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1131	7	6	1	3390	3390	 Expression is equivalent to: "a != (b <= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1132	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1132	7	6	1	3390	3390	 Expression is equivalent to: "a != (b >= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1133	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1133	7	6	1	3390	3390	 Expression is equivalent to: "a != (b > c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1134	12	11	1	3394	3394	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3394.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1134	12	11	1	3390	3390	 Expression is equivalent to: "(a != b) == c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1135	12	11	1	3392	3392	 Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3392.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1135	12	11	1	3390	3390	 Expression is equivalent to: "(a != b) != c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1136	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1136	12	11	1	3390	3390	 Expression is equivalent to: "(a != b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1137	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1137	12	11	1	3390	3390	 Expression is equivalent to: "(a != b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1148	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1148	11	10	1	3390	3390	 Expression is equivalent to: "(a != d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1149	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1149	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b != d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1150	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1150	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c != d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1165	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1165	7	6	1	3390	3390	 Expression is equivalent to: "a & (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1166	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1166	7	6	1	3390	3390	 Expression is equivalent to: "a & (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1167	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1167	7	6	1	3390	3390	 Expression is equivalent to: "a & (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1168	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1168	7	6	1	3390	3390	 Expression is equivalent to: "a & (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1169	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1169	7	6	1	3390	3390	 Expression is equivalent to: "a & (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1171	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1171	11	10	1	3390	3390	 Expression is equivalent to: "(a & b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1172	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1172	11	10	1	3390	3390	 Expression is equivalent to: "(a & b) ^ c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1173	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1173	7	6	1	3390	3390	 Expression is equivalent to: "a & (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1174	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1174	7	6	1	3390	3390	 Expression is equivalent to: "a & (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1175	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1175	7	6	1	3390	3390	 Expression is equivalent to: "a & (b < c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1176	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1176	7	6	1	3390	3390	 Expression is equivalent to: "a & (b <= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1177	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1177	7	6	1	3390	3390	 Expression is equivalent to: "a & (b >= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1178	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1178	7	6	1	3390	3390	 Expression is equivalent to: "a & (b > c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1179	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1179	7	6	1	3390	3390	 Expression is equivalent to: "a & (b == c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1180	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1180	7	6	1	3390	3390	 Expression is equivalent to: "a & (b != c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1181	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1181	11	10	1	3390	3390	 Expression is equivalent to: "(a & b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1182	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1182	11	10	1	3390	3390	 Expression is equivalent to: "(a & b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1193	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1193	11	10	1	3390	3390	 Expression is equivalent to: "(a & d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1194	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1194	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b & d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1195	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1195	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c & d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1208	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1208	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1209	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1209	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1210	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1210	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1211	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1211	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1212	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1212	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1213	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1213	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b & c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1214	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1214	11	10	1	3390	3390	 Expression is equivalent to: "(a ^ b) | c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1216	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1216	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1217	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1217	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1218	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1218	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b < c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1219	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1219	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b <= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1220	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1220	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b >= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1221	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1221	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b > c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1222	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1222	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b == c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1223	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1223	7	6	1	3390	3390	 Expression is equivalent to: "a ^ (b != c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1224	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1224	11	10	1	3390	3390	 Expression is equivalent to: "(a ^ b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1225	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1225	11	10	1	3390	3390	 Expression is equivalent to: "(a ^ b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1236	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1236	11	10	1	3390	3390	 Expression is equivalent to: "(a ^ d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1237	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1237	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b ^ d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1238	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1238	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c ^ d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1252	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1252	7	6	1	3390	3390	 Expression is equivalent to: "a | (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1253	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1253	7	6	1	3390	3390	 Expression is equivalent to: "a | (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1254	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1254	7	6	1	3390	3390	 Expression is equivalent to: "a | (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1255	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1255	7	6	1	3390	3390	 Expression is equivalent to: "a | (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1256	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1256	7	6	1	3390	3390	 Expression is equivalent to: "a | (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1257	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1257	7	6	1	3390	3390	 Expression is equivalent to: "a | (b & c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1259	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1259	7	6	1	3390	3390	 Expression is equivalent to: "a | (b ^ c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1260	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1260	7	6	1	3390	3390	 Expression is equivalent to: "a | (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1261	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1261	7	6	1	3390	3390	 Expression is equivalent to: "a | (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1262	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1262	7	6	1	3390	3390	 Expression is equivalent to: "a | (b < c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1263	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1263	7	6	1	3390	3390	 Expression is equivalent to: "a | (b <= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1264	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1264	7	6	1	3390	3390	 Expression is equivalent to: "a | (b >= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1265	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1265	7	6	1	3390	3390	 Expression is equivalent to: "a | (b > c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1266	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1266	7	6	1	3390	3390	 Expression is equivalent to: "a | (b == c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1267	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1267	7	6	1	3390	3390	 Expression is equivalent to: "a | (b != c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1268	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1268	11	10	1	3390	3390	 Expression is equivalent to: "(a | b) && c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1269	11	10	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1269	11	10	1	3390	3390	 Expression is equivalent to: "(a | b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1280	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1280	11	10	1	3390	3390	 Expression is equivalent to: "(a | d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1281	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1281	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b | d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1282	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1282	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c | d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1296	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1296	7	6	1	3390	3390	 Expression is equivalent to: "a && (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1297	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1297	7	6	1	3390	3390	 Expression is equivalent to: "a && (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1298	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1298	7	6	1	3390	3390	 Expression is equivalent to: "a && (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1299	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1299	7	6	1	3390	3390	 Expression is equivalent to: "a && (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1300	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1300	7	6	1	3390	3390	 Expression is equivalent to: "a && (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1301	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1301	7	6	1	3390	3390	 Expression is equivalent to: "a && (b & c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1302	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1302	7	6	1	3390	3390	 Expression is equivalent to: "a && (b | c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1303	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1303	7	6	1	3390	3390	 Expression is equivalent to: "a && (b ^ c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1304	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1304	7	6	1	3390	3390	 Expression is equivalent to: "a && (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1305	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1305	7	6	1	3390	3390	 Expression is equivalent to: "a && (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1306	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1306	7	6	1	3390	3390	 Expression is equivalent to: "a && (b < c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1307	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1307	7	6	1	3390	3390	 Expression is equivalent to: "a && (b <= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1308	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1308	7	6	1	3390	3390	 Expression is equivalent to: "a && (b >= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1309	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1309	7	6	1	3390	3390	 Expression is equivalent to: "a && (b > c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1310	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1310	7	6	1	3390	3390	 Expression is equivalent to: "a && (b == c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1311	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1311	7	6	1	3390	3390	 Expression is equivalent to: "a && (b != c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1313	12	11	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1313	12	11	1	3390	3390	 Expression is equivalent to: "(a && b) || c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1324	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1324	12	11	1	3390	3390	 Expression is equivalent to: "(a && d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1325	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1325	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b && d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1326	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1326	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c && d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1339	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1339	7	6	1	3390	3390	 Expression is equivalent to: "a || (b * c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1340	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1340	7	6	1	3390	3390	 Expression is equivalent to: "a || (b / c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1341	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1341	7	6	1	3390	3390	 Expression is equivalent to: "a || (b % c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1342	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1342	7	6	1	3390	3390	 Expression is equivalent to: "a || (b + c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1343	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1343	7	6	1	3390	3390	 Expression is equivalent to: "a || (b - c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1344	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1344	7	6	1	3390	3390	 Expression is equivalent to: "a || (b & c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1345	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1345	7	6	1	3390	3390	 Expression is equivalent to: "a || (b | c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1346	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1346	7	6	1	3390	3390	 Expression is equivalent to: "a || (b ^ c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1347	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1347	7	6	1	3390	3390	 Expression is equivalent to: "a || (b << c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1348	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1348	7	6	1	3390	3390	 Expression is equivalent to: "a || (b >> c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1349	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1349	7	6	1	3390	3390	 Expression is equivalent to: "a || (b < c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1350	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1350	7	6	1	3390	3390	 Expression is equivalent to: "a || (b <= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1351	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1351	7	6	1	3390	3390	 Expression is equivalent to: "a || (b >= c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1352	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1352	7	6	1	3390	3390	 Expression is equivalent to: "a || (b > c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1353	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1353	7	6	1	3390	3390	 Expression is equivalent to: "a || (b == c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1354	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1354	7	6	1	3390	3390	 Expression is equivalent to: "a || (b != c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1355	7	6	1	3397	3397	 Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3397.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1355	7	6	1	3390	3390	 Expression is equivalent to: "a || (b && c)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1367	11	10	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1367	11	10	1	3390	3390	 Expression is equivalent to: "(a || d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1368	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1368	7	6	1	3390	3390	 Expression is equivalent to: "a ? (b || d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1369	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1369	7	6	1	3390	3390	 Expression is equivalent to: "a ? b : (c || d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1384	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1384	12	11	1	3390	3390	 Expression is equivalent to: "(a * d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1385	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1385	12	11	1	3390	3390	 Expression is equivalent to: "(a / d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1386	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1386	12	11	1	3390	3390	 Expression is equivalent to: "(a % d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1387	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1387	12	11	1	3390	3390	 Expression is equivalent to: "(a + d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1388	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1388	12	11	1	3390	3390	 Expression is equivalent to: "(a - d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1389	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1389	12	11	1	3390	3390	 Expression is equivalent to: "(a & d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1390	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1390	12	11	1	3390	3390	 Expression is equivalent to: "(a | d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1391	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1391	12	11	1	3390	3390	 Expression is equivalent to: "(a ^ d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1392	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1392	12	11	1	3390	3390	 Expression is equivalent to: "(a << d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1393	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1393	12	11	1	3390	3390	 Expression is equivalent to: "(a >> d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1394	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1394	12	11	1	3390	3390	 Expression is equivalent to: "(a < d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1395	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1395	12	11	1	3390	3390	 Expression is equivalent to: "(a <= d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1396	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1396	12	11	1	3390	3390	 Expression is equivalent to: "(a >= d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1397	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1397	12	11	1	3390	3390	 Expression is equivalent to: "(a > d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1398	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1398	12	11	1	3390	3390	 Expression is equivalent to: "(a == d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1399	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1399	12	11	1	3390	3390	 Expression is equivalent to: "(a != d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1400	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1400	12	11	1	3390	3390	 Expression is equivalent to: "(a && d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1401	12	11	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1401	12	11	1	3390	3390	 Expression is equivalent to: "(a || d) ? b : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1415	7	6	1	3391	3391	 Extra parentheses recommended. A conditional operation is the operand of another conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3391.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1415	7	6	1	3390	3390	 Expression is equivalent to: "c ? d : (e ? a : b)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1429	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1429	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a * d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1430	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1430	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a / d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1431	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1431	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a % d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1432	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1432	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a + d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1433	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1433	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a - d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1434	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1434	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a & d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1435	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1435	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a | d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1436	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1436	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a ^ d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1437	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1437	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a << d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1438	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1438	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a >> d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1439	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1439	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a < d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1440	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1440	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a <= d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1441	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1441	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a >= d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1442	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1442	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a > d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1443	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1443	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a == d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1444	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1444	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a != d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1445	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1445	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a && d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1446	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1446	7	6	1	3390	3390	 Expression is equivalent to: "b ? (a || d) : c"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1460	7	6	1	3391	3391	 Extra parentheses recommended. A conditional operation is the operand of another conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3391.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1460	7	6	1	3390	3390	 Expression is equivalent to: "a ? (c ? d : e) : b"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1474	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1474	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a * d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1475	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1475	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a / d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1476	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1476	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a % d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1477	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1477	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a + d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1478	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1478	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a - d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1479	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1479	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a & d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1480	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1480	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a | d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1481	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1481	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a ^ d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1482	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1482	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a << d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1483	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1483	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a >> d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1484	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1484	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a < d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1485	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1485	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a <= d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1486	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1486	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a >= d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1487	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1487	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a > d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1488	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1488	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a == d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1489	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1489	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a != d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1490	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1490	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a && d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1491	7	6	1	3396	3396	 Extra parentheses recommended. A binary operation is the operand of a conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3396.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1491	7	6	1	3390	3390	 Expression is equivalent to: "c ? b : (a || d)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1505	7	6	1	3391	3391	 Extra parentheses recommended. A conditional operation is the operand of another conditional operator.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3391.html	The precedence of operators within expressions should be made explicit	M3CM Rule-12.1	5
++ WARNING ++	Rule-12.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.01.c	Rule-12	1505	7	6	1	3390	3390	 Expression is equivalent to: "b ? a : (c ? d : e)"	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3390.html	Sub-Messages	0.5	0
++ WARNING ++	Rule-12.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.02.c	Rule-12	37	16	15	1	2790	2790	 Constant: Right hand operand of shift operator is negative or too large.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2790.html	The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand	M3CM Rule-12.2	7
++ WARNING ++	Rule-12.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.02.c	Rule-12	38	16	15	1	2790	2790	 Constant: Right hand operand of shift operator is negative or too large.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2790.html	The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand	M3CM Rule-12.2	7
++ WARNING ++	Rule-12.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.02.c	Rule-12	38	16	15	1	4534	4534	 An expression of 'essentially signed' type (signed char) is being used as the right-hand operand of this shift operator (>>).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4534.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-12.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.02.c	Rule-12	39	14	13	1	499	0499	 Right operand of shift operator is greater than or equal to the width of the essential type of the left operand.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0499.html	The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand	M3CM Rule-12.2	7
++ WARNING ++	Rule-12.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.03.c	Rule-12	32	12	11	1	3226	3226	 The result of an assignment is being used in an arithmetic operation or another assigning operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3226.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-12.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.03.c	Rule-12	32	15	14	1	3417	3417	 The comma operator has been used outside a 'for' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3417.html	The comma operator should not be used	M3CM Rule-12.3	5
++ WARNING ++	Rule-12.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.03.c	Rule-12	34	15	14	1	3418	3418	 The comma operator has been used in a 'for' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3418.html	The comma operator should not be used	M3CM Rule-12.3	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	29	9	8	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	31	9	8	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	32	9	8	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	35	9	8	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	36	9	8	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	43	9	8	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	47	53	52	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	50	9	8	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	54	22	21	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-12.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-12.04.c	Rule-12	56	15	14	1	2910	2910	 Constant: Wraparound in unsigned arithmetic operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2910.html	Evaluation of constant expressions should not lead to unsigned integer wrap-around	M3CM Rule-12.4	5
++ WARNING ++	Rule-13.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.01.c	Rule-13	26	26	25	1	1031	1031	 [C99] Initializer for 'struct', 'union' or array type is not a constant expression.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1031.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-13.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.01.c	Rule-13	27	29	28	1	1031	1031	 [C99] Initializer for 'struct', 'union' or array type is not a constant expression.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1031.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-13.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.01.c	Rule-13	30	14	13	1	1054	1054	 [C99] A compound literal has been used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1054.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-13.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.01.c	Rule-13	30	33	32	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.01.c	Rule-13	30	41	40	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	50	4	3	1	400	0400	 [U] 'x' is modified more than once between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0400.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	50	15	14	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	53	4	3	1	400	0400	 [U] 'x' is modified more than once between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0400.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	53	24	23	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	56	4	3	1	400	0400	 [U] 'x' is modified more than once between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0400.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	56	24	23	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	69	4	3	1	401	0401	 [U] 'x' may be modified more than once between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0401.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	69	30	29	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	70	4	3	1	401	0401	 [U] 'x' may be modified more than once between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0401.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	77	12	11	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	93	30	29	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	102	4	3	1	402	0402	 [U] 'x' is modified and accessed between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0402.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	102	23	22	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	104	4	3	1	402	0402	 [U] 'x' is modified and accessed between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0402.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	104	22	21	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	106	25	24	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	114	4	3	1	403	0403	 [U] 'x' may be modified and accessed between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0403.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.02.c	Rule-13	115	4	3	1	403	0403	 [U] 'x' may be modified and accessed between sequence points - evaluation order unspecified.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0403.html	There shall be no occurrence of undefined or critical unspecified behaviour, The value of an expression and its persistent side-effects shall be the same under all permitted evaluation orders	M3CM Rule-1.3, M3CM Rule-13.2	7
++ WARNING ++	Rule-13.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.03.c	Rule-13	42	8	7	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.03.c	Rule-13	43	9	8	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.03.c	Rule-13	44	8	7	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.03.c	Rule-13	45	9	8	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	28	26	25	1	3226	3226	 The result of an assignment is being used in an arithmetic operation or another assigning operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3226.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	30	14	13	1	2992	2992	 The value of this 'if' controlling expression is always 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2992.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	30	14	13	0	1575	1575	 Variable 'bla' previously seen here. (Specimen value: '0').			0.5	0
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	30	14	13	1	3326	3326	 The result of an assignment is being used in a logical operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3326.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	34	20	19	1	2991	2991	 The value of this 'if' controlling expression is always 'true'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2991.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	34	28	27	1	3326	3326	 The result of an assignment is being used in a logical operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3326.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	34	28	27	1	3415	3415	 Right hand operand of '&&' or '||' is an expression with possible side effects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3415.html	The right hand operand of a logical && or || operator shall not contain persistent side effects	M3CM Rule-13.5	7
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	38	16	15	1	3326	3326	 The result of an assignment is being used in a logical operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3326.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	42	15	14	1	3226	3226	 The result of an assignment is being used in an arithmetic operation or another assigning operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3226.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	44	17	16	1	3226	3226	 The result of an assignment is being used in an arithmetic operation or another assigning operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3226.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-13.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.04.c	Rule-13	44	24	23	1	3226	3226	 The result of an assignment is being used in an arithmetic operation or another assigning operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3226.html	The result of an assignment operator should not be used	M3CM Rule-13.4	5
++ WARNING ++	Rule-13.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.05.c	Rule-13	24	31	30	1	3415	3415	 Right hand operand of '&&' or '||' is an expression with possible side effects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3415.html	The right hand operand of a logical && or || operator shall not contain persistent side effects	M3CM Rule-13.5	7
++ WARNING ++	Rule-13.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.05.c	Rule-13	24	31	30	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-13.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.05.c	Rule-13	29	39	38	1	3415	3415	 Right hand operand of '&&' or '||' is an expression with possible side effects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3415.html	The right hand operand of a logical && or || operator shall not contain persistent side effects	M3CM Rule-13.5	7
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	33	14	13	1	3307	3307	 The operand of 'sizeof' is an expression with implied side effects, but they will not be evaluated.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3307.html	The operand of the sizeof operator shall not contain any expression which has potential side-effects	M3CM Rule-13.6	8
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	35	18	17	1	3307	3307	 The operand of 'sizeof' is an expression with implied side effects, but they will not be evaluated.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3307.html	The operand of the sizeof operator shall not contain any expression which has potential side-effects	M3CM Rule-13.6	8
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	36	18	17	1	3307	3307	 The operand of 'sizeof' is an expression with implied side effects, but they will not be evaluated.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3307.html	The operand of the sizeof operator shall not contain any expression which has potential side-effects	M3CM Rule-13.6	8
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	39	15	14	1	945	0945	 [C99] WARNING. Operand of sizeof is an expression of variable length array type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0945.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	39	15	14	1	1051	1051	 [C99] A variable length array has been declared.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1051.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	40	15	14	1	945	0945	 [C99] WARNING. Operand of sizeof is an expression of variable length array type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0945.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	40	15	14	1	1051	1051	 [C99] A variable length array has been declared.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1051.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	41	16	15	1	945	0945	 [C99] WARNING. Operand of sizeof is an expression of variable length array type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0945.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	41	16	15	1	1051	1051	 [C99] A variable length array has been declared.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1051.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-13.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-13.06.c	Rule-13	41	40	39	1	1052	1052	 [C99] A variable length array of unspecified size has been declared.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1052.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-14.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.01.c	Rule-14	42	10	9	1	3340	3340	 Floating point variable used as 'for' loop control variable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3340.html	A loop counter shall not have essentially floating type	M3CM Rule-14.1	7
++ WARNING ++	Rule-14.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.01.c	Rule-14	42	21	20	1	3342	3342	 Controlling expression of 'for' loop is a floating point comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3342.html	A loop counter shall not have essentially floating type	M3CM Rule-14.1	7
++ WARNING ++	Rule-14.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.01.c	Rule-14	46	19	18	1	3342	3342	 Controlling expression of 'for' loop is a floating point comparison.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3342.html	A loop counter shall not have essentially floating type	M3CM Rule-14.1	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	64	10	9	1	2461	2461	 Loop control variable in this 'for' statement, s16a, has file scope.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2461.html	A for loop shall be well-formed	M3CM Rule-14.2	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	69	10	9	1	2462	2462	 The variable initialized in the first expression of this 'for' statement is not the variable identified as the 'loop control variable' (j).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2462.html	A for loop shall be well-formed	M3CM Rule-14.2	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	75	10	9	1	2463	2463	 The variable incremented in the third expression of this 'for' statement is not the variable identified as the 'loop control variable' (i).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2463.html	A for loop shall be well-formed	M3CM Rule-14.2	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	75	18	17	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	79	10	9	1	2464	2464	 Loop control variable, i, modified twice in for-loop header.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2464.html	A for loop shall be well-formed	M3CM Rule-14.2	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	79	17	16	1	3440	3440	 Using the value resulting from a ++ or -- operation.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3440.html	A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator	M3CM Rule-13.3	5
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	89	9	8	1	2469	2469	 Loop control variable in this 'for' statement, i, is modified in the body of the loop.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2469.html	A for loop shall be well-formed	M3CM Rule-14.2	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	92	10	9	1	2471	2471	 Unable to identify a loop control variable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2471.html	A for loop shall be well-formed	M3CM Rule-14.2	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	97	10	9	1	2472	2472	 More than one possible loop control variable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2472.html	A for loop shall be well-formed	M3CM Rule-14.2	7
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	97	15	14	1	3418	3418	 The comma operator has been used in a 'for' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3418.html	The comma operator should not be used	M3CM Rule-12.3	5
++ WARNING ++	Rule-14.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.02.c	Rule-14	97	56	55	1	3418	3418	 The comma operator has been used in a 'for' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3418.html	The comma operator should not be used	M3CM Rule-12.3	5
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	39	17	16	1	2990	2990	 The value of this loop controlling expression is always 'true'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2990.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	37	21	20	0	1575	1575	 Variable 'loop' previously seen here. (Specimen value: '1').			0.5	0
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	39	17	16	0	1575	1575	 Variable 'loop' previously seen here. (Specimen value: '1').			0.5	0
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	47	15	14	1	2996	2996	 The result of this logical operation is always 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2996.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	41	18	17	0	1575	1575	 Variable 's16a' previously seen here. (Specimen value: '16384').			0.5	0
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	47	21	20	1	2991	2991	 The value of this 'if' controlling expression is always 'true'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2991.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	47	15	14	0	1575	1575	 Variable 's16a' previously seen here. (Specimen value: '16384').			0.5	0
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	47	30	29	1	2995	2995	 The result of this logical operation is always 'true'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2995.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	51	15	14	1	2996	2996	 The result of this logical operation is always 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2996.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	51	21	20	1	2992	2992	 The value of this 'if' controlling expression is always 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2992.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	58	19	18	1	2993	2993	 The value of this 'do - while' loop controlling expression is always 'false'. The loop will only be executed once.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2993.html	Controlling expressions shall not be invariant	M3CM Rule-14.3	7
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	57	9	8	0	1575	1575	 Variable 'u16a' previously seen here. (Specimen value: '1').			0.5	0
++ WARNING ++	Rule-14.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.03.c	Rule-14	58	19	18	1	2996	2996	 The result of this logical operation is always 'false'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2996.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-14.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.04.c	Rule-14	27	9	8	1	3344	3344	 Controlling expression is not an 'essentially Boolean' expression.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3344.html	The controlling expression of an if-statement and the controlling expression of an iteration-statement shall have essentially Boolean type	M3CM Rule-14.4	7
++ WARNING ++	Rule-14.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.04.c	Rule-14	32	11	10	1	3344	3344	 Controlling expression is not an 'essentially Boolean' expression.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3344.html	The controlling expression of an if-statement and the controlling expression of an iteration-statement shall have essentially Boolean type	M3CM Rule-14.4	7
++ WARNING ++	Rule-14.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.04.c	Rule-14	41	13	12	1	3344	3344	 Controlling expression is not an 'essentially Boolean' expression.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3344.html	The controlling expression of an if-statement and the controlling expression of an iteration-statement shall have essentially Boolean type	M3CM Rule-14.4	7
++ WARNING ++	Rule-14.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.04.c	Rule-14	44	18	17	1	3344	3344	 Controlling expression is not an 'essentially Boolean' expression.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3344.html	The controlling expression of an if-statement and the controlling expression of an iteration-statement shall have essentially Boolean type	M3CM Rule-14.4	7
++ WARNING ++	Rule-14.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-14.04.c	Rule-14	49	14	13	1	4559	4559	 An expression of 'essentially unsigned' type (unsigned int) is being used as the first operand of this conditional operator (?).	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4559.html	Operands shall not be of an inappropriate essential type.	M3CM Rule-10.1	7
++ WARNING ++	Rule-15.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.01.c	Rule-15	20	16	15	1	2001	2001	 A 'goto' statement has been used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2001.html	The goto statement should not be used	M3CM Rule-15.1	5
++ WARNING ++	Rule-15.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.02.c	Rule-15	27	14	13	1	2001	2001	 A 'goto' statement has been used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2001.html	The goto statement should not be used	M3CM Rule-15.1	5
++ WARNING ++	Rule-15.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.03.c	Rule-15	26	16	15	1	2001	2001	 A 'goto' statement has been used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2001.html	The goto statement should not be used	M3CM Rule-15.1	5
++ WARNING ++	Rule-15.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.03.c	Rule-15	32	7	6	1	3311	3311	 [u] An earlier jump to this statement will bypass the initialization of local variables.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3311.html	There shall be no occurrence of undefined or critical unspecified behaviour, Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement	M3CM Rule-1.3, M3CM Rule-15.3	7
++ WARNING ++	Rule-15.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.04.c	Rule-15	51	10	9	1	771	0771	 More than one 'break' statement has been used to terminate this iteration statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0771.html	There should be no more than one break or goto statement used to terminate any iteration statement	M3CM Rule-15.4	5
++ WARNING ++	Rule-15.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.04.c	Rule-15	88	19	18	1	2001	2001	 A 'goto' statement has been used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2001.html	The goto statement should not be used	M3CM Rule-15.1	5
++ WARNING ++	Rule-15.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.04.c	Rule-15	119	22	21	1	2001	2001	 A 'goto' statement has been used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2001.html	The goto statement should not be used	M3CM Rule-15.1	5
++ WARNING ++	Rule-15.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.05.c	Rule-15	19	16	15	1	2889	2889	 This function has more than one 'return' path.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2889.html	A function should have a single point of exit at the end	M3CM Rule-15.5	5
++ WARNING ++	Rule-15.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.05.c	Rule-15	27	14	13	0	1572	1572	 Return statement here.			0.5	0
++ WARNING ++	Rule-15.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.05.c	Rule-15	23	14	13	0	1572	1572	 Return statement here.			0.5	0
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	47	7	6	1	2212	2212	 Body of control statement is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2212.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	49	7	6	1	2212	2212	 Body of control statement is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2212.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	51	21	20	1	2214	2214	 Body of control statement is on the same line and is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2214.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	52	9	8	1	2214	2214	 Body of control statement is on the same line and is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2214.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	54	4	3	1	3402	3402	 Braces are needed to clarify the structure of this 'if'-'if'-'else' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3402.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	55	7	6	1	2212	2212	 Body of control statement is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2212.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	66	7	6	1	2212	2212	 Body of control statement is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2212.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	68	30	29	1	2214	2214	 Body of control statement is on the same line and is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2214.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	72	7	6	1	2212	2212	 Body of control statement is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2212.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.06.c	Rule-15	74	7	6	1	2214	2214	 Body of control statement is on the same line and is not enclosed within braces.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2214.html	The body of an iteration-statement or a selection-statement shall be a compound-statement	M3CM Rule-15.6	7
++ WARNING ++	Rule-15.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-15.07.c	Rule-15	28	9	8	1	2004	2004	 No concluding 'else' exists in this 'if'-'else'-'if' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2004.html	All if ... else if constructs shall be terminated with an else statement	M3CM Rule-15.7	7
++ WARNING ++	Rule-16.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.01.c	Rule-16	26	26	25	1	3234	3234	 Declarations precede the first label in this 'switch' construct.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3234.html	All switch statements shall be well-formed	M3CM Rule-16.1	7
++ WARNING ++	Rule-16.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.01.c	Rule-16	27	7	6	1	2008	2008	 Code statements precede the first label in this 'switch' construct.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2008.html	All switch statements shall be well-formed	M3CM Rule-16.1	7
++ WARNING ++	Rule-16.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.01.c	Rule-16	27	7	6	1	2880	2880	 This code is unreachable.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2880.html	A project shall not contain unreachable code	M3CM Rule-2.1	7
++ WARNING ++	Rule-16.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.02.c	Rule-16	30	15	14	1	2019	2019	 'Switch' label is located within a nested code block.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2019.html	A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement	M3CM Rule-16.2	7
++ WARNING ++	Rule-16.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.02.c	Rule-16	38	10	9	1	2983	2983	 This assignment is redundant. The value of this object is never subsequently used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2983.html	There shall be no dead code	M3CM Rule-2.2	7
++ WARNING ++	Rule-16.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.02.c	Rule-16	22	12	11	0	1594	1594	 'n' declared here.			0.5	0
++ WARNING ++	Rule-16.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.02.c	Rule-16	42	4	3	1	2003	2003	 The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2003.html	An unconditional break statement shall terminate every switch-clause	M3CM Rule-16.3	7
++ WARNING ++	Rule-16.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.03.c	Rule-16	37	9	8	1	2003	2003	 The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2003.html	An unconditional break statement shall terminate every switch-clause	M3CM Rule-16.3	7
++ WARNING ++	Rule-16.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.03.c	Rule-16	40	4	3	1	2003	2003	 The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2003.html	An unconditional break statement shall terminate every switch-clause	M3CM Rule-16.3	7
++ WARNING ++	Rule-16.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.03.c	Rule-16	42	4	3	1	2020	2020	 Final 'switch' clause does not end with an explicit 'jump' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2020.html	An unconditional break statement shall terminate every switch-clause	M3CM Rule-16.3	7
++ WARNING ++	Rule-16.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.04.c	Rule-16	30	4	3	1	2002	2002	 No 'default' label found in this 'switch' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2002.html	Every switch statement shall have a default label	M3CM Rule-16.4	7
++ WARNING ++	Rule-16.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.05.c	Rule-16	28	4	3	1	2009	2009	 This 'default' label is not the final 'case' label within the 'switch' block.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2009.html	A default label shall appear as either the first or the last switch label of a switch statement	M3CM Rule-16.5	7
++ WARNING ++	Rule-16.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.05.c	Rule-16	44	4	3	1	2009	2009	 This 'default' label is not the final 'case' label within the 'switch' block.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2009.html	A default label shall appear as either the first or the last switch label of a switch statement	M3CM Rule-16.5	7
++ WARNING ++	Rule-16.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.06.c	Rule-16	28	4	3	1	3315	3315	 This 'switch' statement contains only a single path - it is redundant.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3315.html	Every switch statement shall have at least two switch-clauses	M3CM Rule-16.6	7
++ WARNING ++	Rule-16.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-16.07.c	Rule-16	26	13	12	1	735	0735	 Using relational or logical operators in a 'switch' expression is usually a programming error.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0735.html	A switch-expression shall not have essentially Boolean type	M3CM Rule-16.7	7
++ WARNING ++	Rule-17.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.01.c	Rule-17	17	0	4294967295	1	5130	5130	 Use of standard header file <stdarg.h>.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5130.html	The features of <stdarg.h> shall not be used	M3CM Rule-17.1	7
++ WARNING ++	Rule-17.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.01.c	Rule-17	30	37	36	1	1337	1337	 Function defined with a variable number of parameters.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1337.html	The features of <stdarg.h> shall not be used	M3CM Rule-17.1	7
++ WARNING ++	Rule-17.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.02.c	Rule-17	75	7	6	1	3670	3670	 Recursive call to function containing this call.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3670.html	Functions shall not call themselves, either directly or indirectly	M3CM Rule-17.2	7
++ WARNING ++	Rule-17.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.03.c	Rule-17	23	21	20	1	3335	3335	 No function declaration. Implicit declaration inserted: 'extern int rule_1703a();'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3335.html	A function shall not be declared implicitly	M3CM Rule-17.3	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	36	34	33	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	37	34	33	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	48	20	19	1	3335	3335	 No function declaration. Implicit declaration inserted: 'extern int rule_1704e();'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3335.html	A function shall not be declared implicitly	M3CM Rule-17.3	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	49	20	19	1	3335	3335	 No function declaration. Implicit declaration inserted: 'extern int rule_1704f();'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3335.html	A function shall not be declared implicitly	M3CM Rule-17.3	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	56	4	3	1	745	0745	 [U] 'return;' found in 'rule_1704a()', which has been defined with a non-'void' return type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0745.html	There shall be no occurrence of undefined or critical unspecified behaviour, All exit paths from a function with non-void return type shall have an explicit return statement with an expression	M3CM Rule-1.3, M3CM Rule-17.4	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	59	16	15	1	2888	2888	 This function has been declared with a non-void 'return' type but ends with an implicit 'return ;' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2888.html	All exit paths from a function with non-void return type shall have an explicit return statement with an expression	M3CM Rule-17.4	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	62	1	0	0	1572	1572	 Return statement here.			0.5	0
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	65	1	0	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	66	4	3	1	745	0745	 [U] 'return;' found in 'rule_1704c()', which has been defined with a non-'void' return type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0745.html	There shall be no occurrence of undefined or critical unspecified behaviour, All exit paths from a function with non-void return type shall have an explicit return statement with an expression	M3CM Rule-1.3, M3CM Rule-17.4	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	69	16	15	1	2888	2888	 This function has been declared with a non-void 'return' type but ends with an implicit 'return ;' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2888.html	All exit paths from a function with non-void return type shall have an explicit return statement with an expression	M3CM Rule-17.4	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	71	1	0	0	1572	1572	 Return statement here.			0.5	0
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	70	1	0	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	74	1	0	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	75	5	4	1	3113	3113	 [U] 'return' statement includes no expression but function 'rule_1704e()' is implicitly of type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3113.html	There shall be no occurrence of undefined or critical unspecified behaviour, All exit paths from a function with non-void return type shall have an explicit return statement with an expression	M3CM Rule-1.3, M3CM Rule-17.4	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	78	16	15	1	2888	2888	 This function has been declared with a non-void 'return' type but ends with an implicit 'return ;' statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2888.html	All exit paths from a function with non-void return type shall have an explicit return statement with an expression	M3CM Rule-17.4	8
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	80	1	0	0	1572	1572	 Return statement here.			0.5	0
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	79	1	0	1	2050	2050	 The 'int' type specifier has been omitted from a function declaration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2050.html	Types shall be explicitly specified	M3CM Rule-8.1	7
++ WARNING ++	Rule-17.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.04.c	Rule-17	80	1	0	1	3114	3114	 [U] Function 'rule_1704f()' is implicitly of type 'int' but ends without returning a value.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3114.html	There shall be no occurrence of undefined or critical unspecified behaviour, All exit paths from a function with non-void return type shall have an explicit return statement with an expression	M3CM Rule-1.3, M3CM Rule-17.4	8
++ WARNING ++	Rule-17.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-17.07.c	Rule-17	25	4	3	1	3200	3200	 'rule_1707a' returns a value which is not being used.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3200.html	The value returned by a function having non-void return type shall be used	M3CM Rule-17.7	7
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	31	12	11	1	2930	2930	 Constant: Computing an invalid pointer value.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2930.html	A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand	M3CM Rule-18.1	7
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	28	12	11	0	1594	1594	 'lot' declared here.			0.5	0
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	34	10	9	1	488	0488	 Performing pointer arithmetic.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0488.html	The +, -, += and -= operators should not be applied to an expression of pointer type	M3CM Rule-18.4	5
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	34	10	9	1	2931	2931	 Definite: Computing an invalid pointer value.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2931.html	A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand	M3CM Rule-18.1	7
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	33	6	5	0	1582	1582	 Previously seen here.			0.5	0
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	40	12	11	1	2932	2932	 Apparent: Computing an invalid pointer value.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2932.html	A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand	M3CM Rule-18.1	7
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	40	12	11	0	1574	1574	 Viable path.			0.5	0
++ WARNING ++	Rule-18.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.01.c	Rule-18	36	13	12	0	1575	1575	 Variable 's16a' previously seen here. (Specimen value: '2060').			0.5	0
++ WARNING ++	Rule-18.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.02.c	Rule-18	34	13	12	1	488	0488	 Performing pointer arithmetic.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0488.html	The +, -, += and -= operators should not be applied to an expression of pointer type	M3CM Rule-18.4	5
++ WARNING ++	Rule-18.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.02.c	Rule-18	42	13	12	1	488	0488	 Performing pointer arithmetic.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0488.html	The +, -, += and -= operators should not be applied to an expression of pointer type	M3CM Rule-18.4	5
++ WARNING ++	Rule-18.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.03.c	Rule-18	34	12	11	1	2771	2771	 Definite: Comparing pointers that address different objects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2771.html	Subtraction between pointers shall only be applied to pointers that address elements of the same array, The relational operators >, >=, < and <= shall not be applied to objects of pointer type except where they point into the same object	M3CM Rule-18.2, M3CM Rule-18.3	7
++ WARNING ++	Rule-18.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.03.c	Rule-18	31	8	7	0	1582	1582	 Previously seen here.			0.5	0
++ WARNING ++	Rule-18.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.03.c	Rule-18	32	8	7	0	1582	1582	 Previously seen here.			0.5	0
++ WARNING ++	Rule-18.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.03.c	Rule-18	44	12	11	1	2772	2772	 Apparent: Comparing pointers that address different objects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2772.html	Subtraction between pointers shall only be applied to pointers that address elements of the same array, The relational operators >, >=, < and <= shall not be applied to objects of pointer type except where they point into the same object	M3CM Rule-18.2, M3CM Rule-18.3	7
++ WARNING ++	Rule-18.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.03.c	Rule-18	44	12	11	0	1574	1574	 Viable path.			0.5	0
++ WARNING ++	Rule-18.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.03.c	Rule-18	41	12	11	0	1582	1582	 Previously seen here.			0.5	0
++ WARNING ++	Rule-18.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.04.c	Rule-18	29	15	14	1	488	0488	 Performing pointer arithmetic.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0488.html	The +, -, += and -= operators should not be applied to an expression of pointer type	M3CM Rule-18.4	5
++ WARNING ++	Rule-18.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.04.c	Rule-18	30	12	11	1	488	0488	 Performing pointer arithmetic.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0488.html	The +, -, += and -= operators should not be applied to an expression of pointer type	M3CM Rule-18.4	5
++ WARNING ++	Rule-18.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.05.c	Rule-18	32	22	21	1	3260	3260	 Typedef defined with more than 2 levels of indirection.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3260.html	Declarations should contain no more than two levels of pointer nesting	M3CM Rule-18.5	5
++ WARNING ++	Rule-18.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.05.c	Rule-18	34	40	39	1	3262	3262	 Object defined or declared with more than 2 levels of indirection.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3262.html	Declarations should contain no more than two levels of pointer nesting	M3CM Rule-18.5	5
++ WARNING ++	Rule-18.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.05.c	Rule-18	42	16	15	1	3262	3262	 Object defined or declared with more than 2 levels of indirection.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3262.html	Declarations should contain no more than two levels of pointer nesting	M3CM Rule-18.5	5
++ WARNING ++	Rule-18.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.05.c	Rule-18	43	16	15	1	3262	3262	 Object defined or declared with more than 2 levels of indirection.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3262.html	Declarations should contain no more than two levels of pointer nesting	M3CM Rule-18.5	5
++ WARNING ++	Rule-18.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.05.c	Rule-18	44	30	29	1	3262	3262	 Object defined or declared with more than 2 levels of indirection.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3262.html	Declarations should contain no more than two levels of pointer nesting	M3CM Rule-18.5	5
++ WARNING ++	Rule-18.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.05.c	Rule-18	55	40	39	1	3262	3262	 Object defined or declared with more than 2 levels of indirection.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3262.html	Declarations should contain no more than two levels of pointer nesting	M3CM Rule-18.5	5
++ WARNING ++	Rule-18.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.06.c	Rule-18	55	9	8	1	3217	3217	 Address of automatic object exported to a pointer with linkage or wider scope.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3217.html	The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist	M3CM Rule-18.6	7
++ WARNING ++	Rule-18.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.06.c	Rule-18	58	11	10	1	3230	3230	 Address of automatic object assigned to local pointer with static storage duration.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3230.html	The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist	M3CM Rule-18.6	7
++ WARNING ++	Rule-18.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.06.c	Rule-18	60	9	8	1	3225	3225	 Address of automatic object exported using a function parameter.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3225.html	The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist	M3CM Rule-18.6	7
++ WARNING ++	Rule-18.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.06.c	Rule-18	62	11	10	1	4140	4140	 Address of automatic object exported in function return value.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4140.html	The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist	M3CM Rule-18.6	7
++ WARNING ++	Rule-18.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.08.c	Rule-18	29	33	32	1	1051	1051	 [C99] A variable length array has been declared.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1051.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-18.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.08.c	Rule-18	30	19	18	1	1051	1051	 [C99] A variable length array has been declared.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1051.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-18.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.08.c	Rule-18	34	5	4	1	604	0604	 [C99] Declaration appears after statements in a compound statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0604.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-18.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.08.c	Rule-18	35	5	4	1	604	0604	 [C99] Declaration appears after statements in a compound statement.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0604.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-18.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.08.c	Rule-18	35	21	20	1	1051	1051	 [C99] A variable length array has been declared.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\1051.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-18.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-18.08.c	Rule-18	36	15	14	1	945	0945	 [C99] WARNING. Operand of sizeof is an expression of variable length array type.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0945.html	Variable-length array types shall not be used	M3CM Rule-18.8	7
++ WARNING ++	Rule-19.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.01.c	Rule-19	26	18	17	1	2776	2776	 Definite: Copy between overlapping objects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2776.html	An object shall not be assigned or copied to an overlapping object	M3CM Rule-19.1	8
++ WARNING ++	Rule-19.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.01.c	Rule-19	24	7	6	0	1594	1594	 'buf' declared here.			0.5	0
++ WARNING ++	Rule-19.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.01.c	Rule-19	36	18	17	1	2777	2777	 Apparent: Copy between overlapping objects.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\2777.html	An object shall not be assigned or copied to an overlapping object	M3CM Rule-19.1	8
++ WARNING ++	Rule-19.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.01.c	Rule-19	36	18	17	0	1574	1574	 Viable path.			0.5	0
++ WARNING ++	Rule-19.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.01.c	Rule-19	33	13	12	0	1575	1575	 Variable 'u16a' previously seen here. (Specimen value: '30').			0.5	0
++ WARNING ++	string.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\string.h	string	15	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	string.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\string.h	string	16	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	string.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\string.h	string	21	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	string.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\string.h	string	23	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	string.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\string.h	string	26	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	string.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\string.h	string	27	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-19.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.02.c	Rule-19	20	15	14	1	750	0750	 A union type specifier has been defined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0750.html	The union keyword should not be used	M3CM Rule-19.2	5
++ WARNING ++	Rule-19.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.02.c	Rule-19	23	1	0	1	750	0750	 A union type specifier has been defined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0750.html	The union keyword should not be used	M3CM Rule-19.2	5
++ WARNING ++	Rule-19.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.02.c	Rule-19	30	21	20	1	759	0759	 An object of union type has been defined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0759.html	The union keyword should not be used	M3CM Rule-19.2	5
++ WARNING ++	Rule-19.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-19.02.c	Rule-19	31	18	17	1	759	0759	 An object of union type has been defined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0759.html	The union keyword should not be used	M3CM Rule-19.2	5
++ WARNING ++	Rule-20.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.01.c	Rule-20	24	0	4294967295	1	5087	5087	 Use of #include directive after code fragment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5087.html	#include directives should only be preceded by preprocessor directives or comments	M3CM Rule-20.1	5
++ WARNING ++	Rule-20.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.02.c	Rule-20	1	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-20.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.02.c	Rule-20	6	38	37	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-20.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.02.c	Rule-20	6	44	43	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-20.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.02.c	Rule-20	10	51	50	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-20.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.02.c	Rule-20	13	42	41	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	23	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	24	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	25	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	26	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	27	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	28	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	29	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	30	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	31	0	4294967295	1	5209	5209	 Use of basic type 'double'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	31	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	32	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	33	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	34	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	35	0	4294967295	1	5209	5209	 Use of basic type 'float'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	35	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	36	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	37	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	38	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	39	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	39	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	40	0	4294967295	1	5209	5209	 Use of basic type 'long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	40	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	41	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	42	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	43	0	4294967295	1	5209	5209	 Use of basic type 'short'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	43	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	44	0	4294967295	1	5209	5209	 Use of basic type 'signed'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	44	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	45	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	46	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	47	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	48	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	49	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	50	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	51	0	4294967295	1	5209	5209	 Use of basic type 'unsigned'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	51	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	52	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	53	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	54	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	57	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	58	70	69	1	3439	3439	 Macro redefines a keyword.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3439.html	A macro shall not be defined with the same name as a keyword	M3CM Rule-20.4	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	59	70	69	1	602	0602	 [U] The identifier '_Complex' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-20.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.04.c	Rule-20	60	70	69	1	602	0602	 [U] The identifier '_Imaginary' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-20.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.05.c	Rule-20	24	11	10	1	841	0841	 Using '#undef'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0841.html	#undef should not be used	M3CM Rule-20.5	5
++ WARNING ++	Rule-20.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.06.c	Rule-20	20	74	73	1	3453	3453	 A function could probably be used instead of this function-like macro.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3453.html	A function should be used in preference to a function-like macro where they are interchangeable	M3CM Dir-4.9	4
++ WARNING ++	Rule-20.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.07.c	Rule-20	20	75	74	1	3453	3453	 A function could probably be used instead of this function-like macro.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3453.html	A function should be used in preference to a function-like macro where they are interchangeable	M3CM Dir-4.9	4
++ WARNING ++	Rule-20.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.07.c	Rule-20	21	27	26	1	3410	3410	 Macro parameter not enclosed in ().	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3410.html	Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses	M3CM Rule-20.7	7
++ WARNING ++	Rule-20.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.07.c	Rule-20	21	75	74	1	3453	3453	 A function could probably be used instead of this function-like macro.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3453.html	A function should be used in preference to a function-like macro where they are interchangeable	M3CM Dir-4.9	4
++ WARNING ++	Rule-20.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.09.c	Rule-20	21	5	4	1	3332	3332	 The macro 'X' used in this '#if' or '#elif' expression is not defined.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3332.html	All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation	M3CM Rule-20.9	7
++ WARNING ++	Rule-20.10.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.10.c	Rule-20	20	59	58	1	341	0341	 Using the stringify operator '#'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0341.html	The # and ## preprocessor operators should not be used	M3CM Rule-20.10	5
++ WARNING ++	Rule-20.10.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.10.c	Rule-20	21	59	58	1	342	0342	 Using the glue operator '##'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0342.html	The # and ## preprocessor operators should not be used	M3CM Rule-20.10	5
++ WARNING ++	Rule-20.13.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-20.13.c	Rule-20	31	6	5	1	3115	3115	 Unrecognized preprocessing directive has been ignored because of conditional inclusion directives.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3115.html	A line whose first token is # shall be a valid preprocessing directive	M3CM Rule-20.13	7
++ WARNING ++	rule-20.14.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\rule-20.14.h	rule-20	9	7	6	1	3318	3318	 '#else'/'#elif'/'#endif' in included file matched '#if...' in parent file. This is probably an error.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3318.html	All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related	M3CM Rule-20.14	7
++ WARNING ++	rule-20.14.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\rule-20.14.h	rule-20	13	67	66	1	3317	3317	 '#if...' not matched by '#endif' in included file. This is probably an error.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3317.html	All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related	M3CM Rule-20.14	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	30	16	15	1	836	0836	 [U] Definition of macro named 'defined'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0836.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	33	16	15	1	841	0841	 Using '#undef'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0841.html	#undef should not be used	M3CM Rule-20.5	5
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	33	16	15	1	848	0848	 [U] Attempting to #undef '__LINE__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0848.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	34	16	15	1	841	0841	 Using '#undef'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0841.html	#undef should not be used	M3CM Rule-20.5	5
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	34	16	15	1	848	0848	 [U] Attempting to #undef '__FILE__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0848.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	35	16	15	1	841	0841	 Using '#undef'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0841.html	#undef should not be used	M3CM Rule-20.5	5
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	35	16	15	1	848	0848	 [U] Attempting to #undef '__DATE__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0848.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	36	16	15	1	841	0841	 Using '#undef'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0841.html	#undef should not be used	M3CM Rule-20.5	5
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	36	16	15	1	848	0848	 [U] Attempting to #undef '__TIME__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0848.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	37	16	15	1	841	0841	 Using '#undef'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0841.html	#undef should not be used	M3CM Rule-20.5	5
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	37	16	15	1	848	0848	 [U] Attempting to #undef '__STDC__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0848.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	39	48	47	1	602	0602	 [U] The identifier '__LINE__' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	39	48	47	1	854	0854	 [U] Attempting to #define '__LINE__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0854.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	40	48	47	1	602	0602	 [U] The identifier '__FILE__' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	40	48	47	1	854	0854	 [U] Attempting to #define '__FILE__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0854.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	41	48	47	1	602	0602	 [U] The identifier '__DATE__' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	41	48	47	1	854	0854	 [U] Attempting to #define '__DATE__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0854.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	42	48	47	1	602	0602	 [U] The identifier '__TIME__' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	42	48	47	1	854	0854	 [U] Attempting to #define '__TIME__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0854.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	43	48	47	1	602	0602	 [U] The identifier '__STDC__' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	43	48	47	1	854	0854	 [U] Attempting to #define '__STDC__', which is a predefined macro name.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0854.html	There shall be no occurrence of undefined or critical unspecified behaviour, #define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-1.3, M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	45	48	47	1	4600	4600	 The macro 'NULL' is also defined in '<stddef.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4600.html	#define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	46	48	47	1	4600	4600	 The macro 'EDOM' is also defined in '<errno.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4600.html	#define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	47	48	47	1	4601	4601	 The macro 'tan' is the name of an identifier in '<math.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4601.html	#define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-21.1	7
++ WARNING ++	Rule-21.01.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.01.c	Rule-21	48	48	47	1	4601	4601	 The macro 'printf' is the name of an identifier in '<stdio.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4601.html	#define and #undef shall not be used on a reserved identifier or reserved macro name	M3CM Rule-21.1	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	40	18	17	1	4604	4604	 The object/function 'sqrt' is being declared with the same name as an ordinary identifier defined in '<math.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4604.html	A reserved identifier or macro name shall not be declared	M3CM Rule-21.2	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	43	8	7	1	4602	4602	 The identifier 'EOF' is declared as a macro in '<stdio.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4602.html	A reserved identifier or macro name shall not be declared	M3CM Rule-21.2	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	44	8	7	1	4607	4607	 The enum constant 'cos' has the same name as another ordinary identifier in '<math.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4607.html	A reserved identifier or macro name shall not be declared	M3CM Rule-21.2	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	45	6	5	1	4608	4608	 The tag 'tm' is also defined in '<time.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4608.html	A reserved identifier or macro name shall not be declared	M3CM Rule-21.2	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	47	13	12	1	4605	4605	 The typedef 'FILE' is also defined in '<stdio.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4605.html	A reserved identifier or macro name shall not be declared	M3CM Rule-21.2	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	48	20	19	1	4606	4606	 The typedef 'sin' has the same name as another ordinary identifier in '<math.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4606.html	A reserved identifier or macro name shall not be declared	M3CM Rule-21.2	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	65	18	17	1	4603	4603	 The object/function 'sqrt'is being defined with the same name as an ordinary identifier defined in '<math.h>'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\4603.html	A reserved identifier or macro name shall not be declared	M3CM Rule-21.2	7
++ WARNING ++	Rule-21.02.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.02.c	Rule-21	70	16	15	1	602	0602	 [U] The identifier '_rule_2102a' is reserved for use by the library.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0602.html	There shall be no occurrence of undefined or critical unspecified behaviour, A reserved identifier or macro name shall not be declared	M3CM Rule-1.3, M3CM Rule-21.2	7
++ WARNING ++	Rule-21.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.03.c	Rule-21	29	20	19	1	5118	5118	 Use of memory allocation or deallocation function: calloc, malloc, realloc or free.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5118.html	The memory allocation and deallocation functions of <stdlib.h> shall not be used	M3CM Rule-21.3	7
++ WARNING ++	Rule-21.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.03.c	Rule-21	30	4	3	1	5118	5118	 Use of memory allocation or deallocation function: calloc, malloc, realloc or free.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5118.html	The memory allocation and deallocation functions of <stdlib.h> shall not be used	M3CM Rule-21.3	7
++ WARNING ++	Rule-21.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.03.c	Rule-21	32	20	19	1	5118	5118	 Use of memory allocation or deallocation function: calloc, malloc, realloc or free.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5118.html	The memory allocation and deallocation functions of <stdlib.h> shall not be used	M3CM Rule-21.3	7
++ WARNING ++	Rule-21.03.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.03.c	Rule-21	33	20	19	1	5118	5118	 Use of memory allocation or deallocation function: calloc, malloc, realloc or free.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5118.html	The memory allocation and deallocation functions of <stdlib.h> shall not be used	M3CM Rule-21.3	7
++ WARNING ++	Rule-21.04.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.04.c	Rule-21	15	0	4294967295	1	5132	5132	 Use of standard header file <setjmp.h>.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5132.html	The standard header file <setjmp.h> shall not be used	M3CM Rule-21.4	7
++ WARNING ++	setjmp.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\setjmp.h	setjmp	8	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	setjmp.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\setjmp.h	setjmp	9	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-21.05.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.05.c	Rule-21	15	0	4294967295	1	5123	5123	 Use of standard header file <signal.h>.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5123.html	The standard header file <signal.h> shall not be used	M3CM Rule-21.5	7
++ WARNING ++	signal.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\signal.h	signal	16	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	signal.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\signal.h	signal	17	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-21.06.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.06.c	Rule-21	15	0	4294967295	1	5124	5124	 Use of standard header file <stdio.h>.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5124.html	The Standard Library input/output functions shall not be used	M3CM Rule-21.6	7
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	31	0	4294967295	1	5209	5209	 Use of basic type 'unsigned'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	34	0	4294967295	1	5209	5209	 Use of basic type 'unsigned'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	44	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	48	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	59	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	63	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	64	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	66	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	68	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	68	0	4294967295	1	5209	5209	 Use of basic type 'long int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	76	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	stdio.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\stdio.h	stdio	80	0	4294967295	1	5209	5209	 Use of basic type 'long'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-21.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.07.c	Rule-21	29	9	8	1	5125	5125	 Use of function: atof, atoi, atol or atoll.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5125.html	The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used	M3CM Rule-21.7	7
++ WARNING ++	Rule-21.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.07.c	Rule-21	30	9	8	1	5125	5125	 Use of function: atof, atoi, atol or atoll.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5125.html	The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used	M3CM Rule-21.7	7
++ WARNING ++	Rule-21.07.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.07.c	Rule-21	31	9	8	1	5125	5125	 Use of function: atof, atoi, atol or atoll.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5125.html	The atof, atoi, atol and atoll functions of <stdlib.h> shall not be used	M3CM Rule-21.7	7
++ WARNING ++	Rule-21.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.08.c	Rule-21	28	8	7	1	5126	5126	 Use of function: abort, exit, getenv or system.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5126.html	The library functions abort, exit, getenv and system of <stdlib.h> shall not be used	M3CM Rule-21.8	7
++ WARNING ++	Rule-21.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.08.c	Rule-21	32	7	6	1	5126	5126	 Use of function: abort, exit, getenv or system.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5126.html	The library functions abort, exit, getenv and system of <stdlib.h> shall not be used	M3CM Rule-21.8	7
++ WARNING ++	Rule-21.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.08.c	Rule-21	37	7	6	1	5126	5126	 Use of function: abort, exit, getenv or system.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5126.html	The library functions abort, exit, getenv and system of <stdlib.h> shall not be used	M3CM Rule-21.8	7
++ WARNING ++	Rule-21.08.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.08.c	Rule-21	40	8	7	1	5126	5126	 Use of function: abort, exit, getenv or system.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5126.html	The library functions abort, exit, getenv and system of <stdlib.h> shall not be used	M3CM Rule-21.8	7
++ WARNING ++	Rule-21.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.09.c	Rule-21	24	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-21.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.09.c	Rule-21	34	5	4	1	5135	5135	 Use of function: bsearch or qsort.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5135.html	The library functions bsearch and qsort of <stdlib.h> shall not be used	M3CM Rule-21.9	7
++ WARNING ++	Rule-21.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.09.c	Rule-21	36	22	21	1	5135	5135	 Use of function: bsearch or qsort.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5135.html	The library functions bsearch and qsort of <stdlib.h> shall not be used	M3CM Rule-21.9	7
++ WARNING ++	Rule-21.09.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.09.c	Rule-21	47	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-21.10.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.10.c	Rule-21	15	0	4294967295	1	5127	5127	 Use of standard header file <time.h>.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5127.html	The Standard Library time and date functions shall not be used	M3CM Rule-21.10	7
++ WARNING ++	time.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\time.h	time	18	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	time.h	C:\Users\okonp\AppData\Local\PRQA\QA-Framework-1.0.5\config\cct\DATA\PRQA_Generic_C\Stub\include\iso_c\time.h	time	21	0	4294967295	1	5209	5209	 Use of basic type 'double'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	Rule-21.11.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.11.c	Rule-21	15	0	4294967295	1	5131	5131	 Use of standard header file <tgmath.h>.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5131.html	The standard header file <tgmath.h> shall not be used	M3CM Rule-21.11	7
++ WARNING ++	Rule-21.12.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.12.c	Rule-21	25	11	10	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	Rule-21.12.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.12.c	Rule-21	27	9	8	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	Rule-21.12.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.12.c	Rule-21	32	67	66	1	3116	3116	 Unrecognized #pragma arguments 'STDC FENV_ACCESS ON' This #pragma directive has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3116.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-21.12.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.12.c	Rule-21	37	67	66	1	3116	3116	 Unrecognized #pragma arguments 'STDC FENV_ACCESS OFF' This #pragma directive has been ignored.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3116.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	Rule-21.12.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\Rule-21.12.c	Rule-21	38	13	12	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	12	0	4294967295	1	5209	5209	 Use of basic type 'unsigned int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	17	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	18	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	19	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	20	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	21	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	22	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	29	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	29	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	30	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	30	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	31	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	31	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	32	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	32	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	33	0	4294967295	1	5136	5136	 Use of exception handling identifier: feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag or fetestexcept.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5136.html	The exception handling features of <fenv.h> should not be used	M3CM Rule-21.12	5
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	33	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	34	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	35	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	36	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	37	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	38	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	fenv.h	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\fenv.h	fenv	39	0	4294967295	1	5209	5209	 Use of basic type 'int'.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5209.html	typedefs that indicate size and signedness should be used in place of the basic numerical types	M3CM Dir-4.6	4
++ WARNING ++	amain.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\amain.c	amain	1	0	4294967295	1	5133	5133	 Comment delimiter /* or // found within comment.	C:\PRQA\QA-Framework-1.0.5\components\m3cm-1.0.3\doc-en_US\messages\5133.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	amain.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\amain.c	amain	35	23	22	1	292	0292	 [I] Source file 'C:/PRQA/QA-Framework-1.0.5/samples/M3CM_Examples/src/amain.c' has comments containing one of the characters '$', '@' or '`'.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\0292.html	Any implementation-defined behaviour on which the output of the program depends shall be documented and understood	M3CM Dir-1.1	6
++ WARNING ++	amain.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\amain.c	amain	130	26	25	1	3108	3108	 Nested comments are not recognized in the ISO standard.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3108.html	The character sequences /* and // shall not be used within a comment.	M3CM Rule-3.1	7
++ WARNING ++	amain.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\amain.c	amain	195	16	15	1	3447	3447	 'obj0103' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	amain.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\amain.c	amain	196	16	15	1	3447	3447	 'obj_0805b' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	amain.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\amain.c	amain	197	16	15	1	3447	3447	 'obj_0508a' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
++ WARNING ++	amain.c	C:\PRQA\QA-Framework-1.0.5\samples\M3CM_Examples\src\amain.c	amain	198	16	15	1	3447	3447	 'obj_0508b' is being declared with external linkage but this declaration is not in a header file.	C:\PRQA\QA-Framework-1.0.5\components\qac-8.2.2\doc-en_US\messages\3447.html	An external object or function shall be declared once in one and only one file	M3CM Rule-8.5	7
